autoplot(aus_trips)
HT %>%
model((M)) %>%
forecast(h = 24) %>%
autoplot(HT, level=c(80,95), guide="none")
HT %>%
model((M)) %>%
forecast(h = 24) %>%
autoplot(HT, level=c(80,95))
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
autoplot(HT, level=c(80,95))
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
feasts:autoplot(HT, level=c(80,95))
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
feasts:autoplot(HT, level=c(80,95))
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
feasts::autoplot(HT, level=c(80,95))
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
forecast::autoplot(HT, level=c(80,95))
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
forecast::autoplot(HT)
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
feasts::autoplot(HT)
library(fpp3)
HT %>%
model(mean = MEAN(M ~ window(size = 1000)))%>%
forecast(h = 24) %>%
fpp3:autoplot(HT, level=NULL)
HT %>%
model(mean = MEAN(M ~ window(size = 1000)))%>%
forecast(h = 24) %>%
fpp3::autoplot(HT, level=NULL)
HT %>%
model(mean = MEAN(M ~ window(size = 1000)))%>%
forecast(h = 24) %>%
feasts::autoplot(HT, level=NULL)
HT %>%
model(mean = MEAN(M ~ window(size = 1000)))%>%
forecast(h = 24) %>%
forecast::autoplot(HT, level=NULL)
HT=ungroup(HT)
HT=as_tsibble(HT, key=SS)
HT %>%
mutate(
`12-MA` = slider::slide_dbl(M, mean,
.before = 11, .after = 0, .complete=TRUE)
) %>%
autoplot(M, color="gray") +
geom_line(aes(y = `12-MA`), colour = "#D55E00")
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
feasts::autoplot(HT)
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
fable::autoplot(HT)
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
autoplot(HT, level=NULL)
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
autoplot(HT)
library(fable)
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
autoplot(HT)
HT3=HT%>%
model(NAIVE(M)) %>%
forecast(h = 24)
class(HT3)
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(plotly)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(forecast)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(fpp3)
library(kableExtra)
library(DT)
#library(feasts)
library(tsibble)
library(tsibbledata)
library(lubridate)
library(fable)
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
```{r, warning=FALSE, fig.height=3, out.width='100%', message=FALSE}
HT$Month=make_yearmonth(year = HT$ANIO_REGIS, month =  HT$MES_REGIS)
library(ggplot2)
library(dplyr)
library(MASS) # for truehist function
load("Marriages.Rda")
SS=Ag_data[Ag_data$SS==TRUE,]
HT=Ag_data[Ag_data$SS==FALSE,]
HT$M=as.numeric(HT$M)
HT$Month=make_yearmonth(year = HT$ANIO_REGIS, month =  HT$MES_REGIS)
SS$Month=make_yearmonth(year = SS$ANIO_REGIS, month =  SS$MES_REGIS)
HT=as_tsibble(HT, index=Month)
SS=as_tsibble(SS, index=Month)
autoplot(HT, M)
autoplot(SS, M)
autoplot(HT, M)
autoplot(HT, M)
autoplot(HT, M)
autoplot(HT, M)
PBS %>%
filter(ATC2 == "A10") %>%
summarise(total_cost = sum(Cost)) %>%
mutate(total_cost = total_cost / 1e6) -> a10
autoplot(a10, total_cost) +
labs(y = "$ (millions)",
title = "Australian antidiabetic drug sales")
aus_production %>%
filter(year(Quarter) >= 1980) %>%
autoplot(Electricity) +
labs(y = "GWh", title = "Australian electricity production")
aus_production %>%
autoplot(Bricks) +
labs(y = "million units", title = "Australian clay brick production")
gafa_stock %>%
filter(Symbol == "AMZN", year(Date) >= 2018) %>%
autoplot(Close) +
labs(y = "$US", title = "Amazon closing stock price")
HT=ungroup(HT)
HT[,c("Month","M")] %>%
mutate(
Lag1_M = lag(M, order_by = Month),
Lag2_M = lag(M, order_by = Month, n = 2),
Lag3_M = lag(M, order_by = Month, n = 3)
)
p=HT|>ACF(M)
kable(t(p)[,1:6])
HT|>ACF(M)|>autoplot()
retail <- us_employment %>%
filter(Title == "Retail Trade", year(Month) >= 1980)
retail <- us_employment %>%
filter(Title == "Retail Trade", year(Month) >= 1980)
v=retail %>% autoplot(Employed)
w=retail %>%
ACF(Employed, lag_max = 48) %>%
autoplot()
w
google_2015 <- gafa_stock %>%
filter(Symbol == "GOOG", year(Date) == 2015)
v=google_2015 %>%autoplot()
w=google_2015 %>%
ACF(Close, lag_max = 100) %>%
autoplot()
v
w
cowtemp <- as_tsibble(fma::cowtemp)
USAccDeaths <- as_tsibble(USAccDeaths)
AirPassengers <- as_tsibble(AirPassengers)
mink <- as_tsibble(fma::mink)
tp1 <- autoplot(cowtemp, value) +
labs(x = "", y = "chirps per minute", title = "1. Daily temperature of cow")
tp2 <- autoplot(USAccDeaths, value) +
labs(x = "", y = "thousands", title = "2. Monthly accidental deaths")
tp3 <- autoplot(AirPassengers, value) +
labs(x = "", y = "thousands", title = "3. Monthly air passengers")
tp4 <- autoplot(mink, value) +
labs(x = "", y = "thousands", title = "4. Annual mink trappings")
acfb <- ACF(cowtemp, value) %>% autoplot() +
labs(x="", title="B") + ylim(-0.4,1)
acfa <- ACF(USAccDeaths, value) %>% autoplot() +
labs(x = "", title = "A") + ylim(-0.4,1)
acfd <- ACF(AirPassengers, value) %>% autoplot() +
labs(x = "", title = "D") + ylim(-0.4,1)
acfc <- ACF(mink, value) %>% autoplot() +
labs(x = "", title ="C") + ylim(-0.4,1)
plot_grid(tp1, tp2, tp3, tp4,acfa, acfb , acfc , acfd, ncol = 4)
set.seed(30)
y <- ts(rnorm(50))
autoplot(y) + ggtitle("White noise")
ggAcf(y)
HT|>ACF(M)|>autoplot()
SS|>ACF(M)|>autoplot()
SS=ungroup(SS)
SS[,c("Month","M")] %>%
mutate(Diff_M = difference(M))
SS|>autoplot(difference(M))
SS|>ACF(difference(M))|>autoplot()
HT %>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
autoplot(HT, level=NULL)
HT3=HT%>%
model(NAIVE(M)) %>%
forecast(h = 24)
class(HT3)
HT3=HT%>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
autplot()
HT3=HT%>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
autoplot()
HT3
HT%>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
autoplot()
HT%>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
autoplot(HT)
HT%>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
autoplot(HT, level=NULL)
HT%>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
fable::autoplot(HT, level=NULL)
HT%>%
model(NAIVE(M)) %>%
forecast(h = 24) %>%
feasts::autoplot(HT, level=NULL)
library(tidyverse)
library(tsibble)
library(lubridate)
library(fable)
tourism
tourism <- tourism %>%
mutate(
State = recode(State,
"Australian Capital Territory" = "ACT",
"New South Wales" = "NSW",
"Northern Territory" = "NT",
"Queensland" = "QLD",
"South Australia" = "SA",
"Tasmania" = "TAS",
"Victoria" = "VIC",
"Western Australia" = "WA"
)
)
snowy <- tourism %>%
filter(
Region == "Snowy Mountains",
Purpose == "Holiday"
)
snowy
fit <- snowy %>%
model(
snaive = SNAIVE(Trips ~ lag("year")),
ets = ETS(Trips),
arima = ARIMA(Trips)
)
fit
fc <- fit %>%
forecast(h = 12)
fc
fc %>%
autoplot(snowy, level = NULL) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") +
guides(colour = guide_legend(title = "Forecast"))
fc %>%
autoplot(snowy) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") +
guides(colour = guide_legend(title = "Forecast"))
hilo(fc, level = 95)
a=hilo(fc, level = 95)
autoplot(a)
autoplot(a, level=95) + xlab("Year") + ylab("Trips") + ggtitle("Forecast intervals for Snowy Mountains holidays")
autoplot(a$`95%`, level=95) + xlab("Year") + ylab("Trips") + ggtitle("Forecast intervals for Snowy Mountains holidays")
library(tidyverse)
library(tsibble)
library(lubridate)
library(fable)
tourism
tourism <- tourism %>%
mutate(
State = recode(State,
"Australian Capital Territory" = "ACT",
"New South Wales" = "NSW",
"Northern Territory" = "NT",
"Queensland" = "QLD",
"South Australia" = "SA",
"Tasmania" = "TAS",
"Victoria" = "VIC",
"Western Australia" = "WA"
)
)
snowy <- tourism %>%
filter(
Region == "Snowy Mountains",
Purpose == "Holiday"
)
snowy
fit <- snowy %>%
model(
snaive = SNAIVE(Trips ~ lag("year")),
ets = ETS(Trips),
arima = ARIMA(Trips)
)
fit
fc <- fit %>%
forecast(h = 12)
fc
fc %>%
autoplot(snowy, level = NULL) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") +
guides(colour = guide_legend(title = "Forecast"))
fc %>%
autoplot(snowy) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") +
guides(colour = guide_legend(title = "Forecast"))
library(tidyverse)
library(tsibble)
library(feasts)
library(fable)
library(fabletools)
tourism_melb <- tourism %>%
filter(Region == "Melbourne") %>%
filter(Purpose == "Business") %>%
select(-Region, -State, -Purpose)
fableModels <- tourism_melb %>%
model(arima = ARIMA(), tslm = TSLM(Trips ~ trend()), mean = MEAN(window = 4))
forecasts <- fableModels %>%
forecast(h = "2 years")
forecasts %>% autoplot(tourism_melb)
fc %>%
autoplot(snowy,show_guide = FALSE) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") +
guides(colour = guide_legend(title = "Forecast"))
fc %>%
autoplot(snowy, show_legend = FALSE) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") +
guides(colour = guide_legend(title = "Forecast"))
fc %>%
autoplot(snowy, level=NULL) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") +
guides(colour = guide_legend(title = "Forecast"))
fc %>%
autoplot(snowy, level=NULL) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") + theme(show_legend = TRUE))
fc %>%
autoplot(snowy, level=NULL) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") + theme(show_legend = TRUE)
fc %>%
autoplot(snowy, level=NULL) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") + guides(fill="none")
fc %>%
autoplot(snowy) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") + guides(fill="none")
fc %>%
autoplot(snowy) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") +  scale_fill_discret(fill="none")
fc %>%
autoplot(snowy) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") +  scale_fill_discret(guide="none")
fc %>%
autoplot(snowy) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year") + scale_fill_discrete(guide="none")
fc %>%
autoplot(snowy) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year")+ theme(legend.position="none")
fc %>%
autoplot(snowy, show.legend = FALSE) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year")+ theme(legend.position="none")
fc %>%
fabletools::autoplot(snowy, show.legend = FALSE) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year")+ theme(legend.position="none")
fc %>%
forecast:::autoplot.forecast(snowy, show.legend = FALSE) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year")+ theme(legend.position="none")
fc %>%
forecast:::autoplot.forecast(snowy) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year")+ theme(legend.position="none")
fc %>%
forecast:::autoplot.forecast(fit) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year")+ theme(legend.position="none")
fc %>%
forecast:::autoplot.forecast(fc) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year")+ theme(legend.position="none")
forecast:::autoplot.forecast(fc)
forecast:::autoplot.forecast(fc)
fc <- fit %>%
forecast(h = 12)
fc
fit <- snowy %>%
model(
snaive = SNAIVE(Trips ~ lag("year")),
ets = ETS(Trips),
arima = ARIMA(Trips)
)
fit
fc <- fit %>%
forecast(h = 12)
fc
fc %>%
forecast:::autoplot.forecast(fc) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year")+ theme(legend.position="none")
fc %>%
forecast:::autoplot(fc) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year")+ theme(legend.position="none")
fc %>%
forecastautoplot(fc) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year")+ theme(legend.position="none")
fc %>%
forecast::autoplot(fc) +
ggtitle("Forecasts for Snowy Mountains holidays") +
xlab("Year")+ theme(legend.position="none")
fc %>%
forecast::autoplot(fc)
fc %>%
fable::autoplot(fc)
fc %>%
fable::autoplot()
fc %>%
fable::autoplot(snowy)
fc %>%
forecast::autoplot(snowy)
fc %>%
forecast::autoplot(snowy)
install.packages(c("basemaps", "bayestestR", "berryFunctions", "BMisc", "bookdown", "brio", "broom.helpers", "bslib", "callr", "cli", "collapse", "crul", "curl", "data.table", "datawizard", "DBI", "dbplyr", "digest", "distributional", "DT", "fable", "fabletools", "fansi", "feasts", "fixest", "forecast", "fs", "gdtools", "GGally", "ggdist", "ggplot2", "ggsci", "ggstats", "gh", "glue", "gtable", "hrbrthemes", "htmltools", "httpuv", "httr2", "igraph", "insight", "knitr", "labelled", "leaflet", "lme4", "lubridate", "lwgeom", "magick", "modelsummary", "munsell", "nominatimlite", "openssl", "parameters", "performance", "pkgbuild", "pkgdown", "plm", "plotly", "prettymapr", "processx", "promises", "purrr", "qpdf", "quantmod", "quarto", "ragg", "RcppArmadillo", "RcppEigen", "readr", "readxl", "remotes", "renv", "rgl", "rmarkdown", "rnaturalearthdata", "rsconnect", "rstudioapi", "rvest", "sass", "servr", "sf", "shiny", "sp", "stars", "stringi", "stringmagic", "systemfonts", "tables", "testthat", "tidyr", "tidyselect", "timechange", "tinytex", "tm", "usethis", "utf8", "vroom", "xaringan", "xfun", "xopen", "yaml"))
install.packages(c("basemaps", "bayestestR", "berryFunctions", "BMisc", "bookdown", "brio", "broom.helpers", "bslib", "callr", "cli", "collapse", "crul", "curl", "data.table", "datawizard", "DBI", "dbplyr", "digest", "distributional", "DT", "fable", "fabletools", "fansi", "feasts", "fixest", "forecast", "fs", "gdtools", "GGally", "ggdist", "ggplot2", "ggsci", "ggstats", "gh", "glue", "gtable", "hrbrthemes", "htmltools", "httpuv", "httr2", "igraph", "insight", "knitr", "labelled", "leaflet", "lme4", "lubridate", "lwgeom", "magick", "modelsummary", "munsell", "nominatimlite", "openssl", "parameters", "performance", "pkgbuild", "pkgdown", "plm", "plotly", "prettymapr", "processx", "promises", "purrr", "qpdf", "quantmod", "quarto", "ragg", "RcppArmadillo", "RcppEigen", "readr", "readxl", "remotes", "renv", "rgl", "rmarkdown", "rnaturalearthdata", "rsconnect", "rstudioapi", "rvest", "sass", "servr", "sf", "shiny", "sp", "stars", "stringi", "stringmagic", "systemfonts", "tables", "testthat", "tidyr", "tidyselect", "timechange", "tinytex", "tm", "usethis", "utf8", "vroom", "xaringan", "xfun", "xopen", "yaml"))
library(tidyverse)
library(tsibble)
library(lubridate)
library(fable)
tourism
tourism <- tourism %>%
mutate(
State = recode(State,
"Australian Capital Territory" = "ACT",
"New South Wales" = "NSW",
"Northern Territory" = "NT",
"Queensland" = "QLD",
"South Australia" = "SA",
"Tasmania" = "TAS",
"Victoria" = "VIC",
"Western Australia" = "WA"
)
)
snowy <- tourism %>%
filter(
Region == "Snowy Mountains",
Purpose == "Holiday"
)
snowy
fit <- snowy %>%
model(
snaive = SNAIVE(Trips ~ lag("year")),
ets = ETS(Trips),
arima = ARIMA(Trips)
)
fit
fc <- fit %>%
forecast(h = 12)
fc
fc %>%
forecast::autoplot(snowy)
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_6_slides_a.html")
