# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = Fitted, color = "Fitted Model")) +
geom_point(aes(y = Observed, shape = Sample), size = 3) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "black", "Fitted Model" = "blue")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(123)
n <- 100
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 5)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 20)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(123)
n <- 60
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(123)
n <- 60
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(123)
n <- 60
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(1223)
n <- 60
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(1223)
n <- 61
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 0.5, linetype = "dashed", color = "red") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Out-of-Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 0.5, linetype = "dashed", color = "red") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 0.5, linetype = "dashed", color = "red") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Out-of-Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
xaringan::inf_mr()
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(plotly)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(forecast)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(fpp3)
library(kableExtra)
library(DT)
library(feasts)
library(tsibble)
library(tsibbledata)
library(lubridate)
X=HT %>%
modelSNAIVE(M ~ lag("year"))
X=HT %>%
model(SNAIVE(M ~ lag("year")))
sd(X$`SNAIVE(M ~ lag("year"))`[[1]]$fit$.resid, na.rm=TRUE)
Marriages_train=HT%>%
filter(as.numeric(ANIO_REGIS) < 2010)
FC=Marriages_train %>%
model(
Mean = MEAN(M),
`Naïve` = NAIVE(M),
`Seasonal naïve` = SNAIVE(M))%>%
forecast(h = 10, level=NULL)
FC%>%autoplot(HT)
HT2=HT%>%filter(as.numeric(ANIO_REGIS) < 2012)
FC%>%autoplot(HT2)
FC%>%autoplot(HT2, level=NULL)
HT2=HT%>%filter(as.numeric(ANIO_REGIS) < 2011)
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_6_slides_a.html")
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_6_slides_a.html")
xaringan::inf_mr()
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(plotly)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(forecast)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(fpp3)
library(kableExtra)
library(DT)
library(feasts)
library(tsibble)
library(tsibbledata)
library(lubridate)
cowtemp <- as_tsibble(fma::cowtemp)
USAccDeaths <- as_tsibble(USAccDeaths)
AirPassengers <- as_tsibble(AirPassengers)
View(HT)
mink <- as_tsibble(fma::mink)
tp1 <- autoplot(cowtemp, value) +
labs(x = "", y = "chirps per minute", title = "1. Daily temperature of cow")
tp2 <- autoplot(USAccDeaths, value) +
labs(x = "", y = "thousands", title = "2. Monthly accidental deaths")
tp3 <- autoplot(AirPassengers, value) +
library(renderthis)
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_6_slides_a.html")
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_6_slides_a.html")
xaringan::inf_mr()
1.5952*41-0.1424*381
c=matrix(c(6,60,60,670))
solve(c)
solve(c)
c=matrix(c(6,60,60,670),2,2)
solve(c)
X=matrix(c(1,1,1,1,1,1,5,7,9,11,13,15),6,2)
beta=(11.1488,-0.3901)
beta=c(11.1488,-0.3901)
y=c(9,7,8,7,6,4)
X*b
X*beta
X%*%beta
sum((y-X%*%beta)^2)
