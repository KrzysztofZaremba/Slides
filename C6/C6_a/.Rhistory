initial_sample_size <- 60
# Function to calculate one-step-ahead errors
calc_one_step_ahead_errors <- function(data, initial_size) {
n <- length(data)
one_step_errors <- rep(NA, n - initial_size)
for (i in 1:length(one_step_errors)) {
train_data <- window(data, end = initial_size + i - 1)
model <- auto.arima(train_data)
forecast_result <- forecast(model, h = 1)
one_step_errors[i] = data[initial_size + i] - forecast_result$mean
}
return(one_step_errors)
}
# Calculate one-step-ahead errors
one_step_errors <- calc_one_step_ahead_errors(ts_data, initial_sample_size)
# Define a data frame for plotting
plot_df <- data.frame(
Time = time(ts_data),
Observed = as.numeric(ts_data),
Estimation = c(rep("In Estimation Sample", initial_sample_size),
rep("Out of Estimation Sample", length(ts_data) - initial_sample_size)),
OneStepError = c(rep(NA, initial_sample_size), one_step_errors),
ModelLine = c(as.numeric(fitted(auto.arima(window(ts_data, end = initial_sample_size)))), rep(NA, length(ts_data) - initial_sample_size))
)
# Generate a sample time series dataset
set.seed(123)
ts_data <- ts(rnorm(100), frequency = 12)
# Initial estimation sample size
initial_sample_size <- 60
# Function to calculate one-step-ahead errors
calc_one_step_ahead_errors <- function(data, initial_size) {
n <- length(data)
one_step_errors <- rep(NA, n - initial_size)
for (i in 1:length(one_step_errors)) {
train_data <- window(data, end = initial_size + i - 1)
model <- auto.arima(train_data)
forecast_result <- forecast(model, h = 1)
one_step_errors[i] = data[initial_size + i] - forecast_result$mean
}
return(one_step_errors)
}
# Calculate one-step-ahead errors
one_step_errors <- calc_one_step_ahead_errors(ts_data, initial_sample_size)
one_step_errors
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(123)
n <- 100
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed")) +
geom_line(aes(y = Fitted, color = "Fitted Model")) +
geom_point(aes(y = Observed, shape = Sample), size = 3) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "black", "Fitted Model" = "blue")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(123)
n <- 100
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 5)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 20)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(123)
n <- 60
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(123)
n <- 60
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(123)
n <- 60
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(1223)
n <- 60
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Load necessary libraries
library(ggplot2)
library(plotly)
# Generate a time series dataset with a trend
set.seed(1223)
n <- 61
trend <- 0.1 * (1:n)
noise <- rnorm(n, mean = 0, sd = 1)
ts_data <- trend + noise
# Define estimation sample (all but last observation)
estimation_sample <- ts_data[1:(n - 1)]
prediction_sample <- ts_data[n]
# Fit a linear model to the estimation sample
time_index <- 1:(n - 1)
model <- lm(estimation_sample ~ time_index)
# Predict the next value
predicted_value <- predict(model, newdata = data.frame(time_index = n))
forecast_error <- prediction_sample - predicted_value
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Prediction Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Observed, color = "Observed"), size = 0.5, color = "grey") +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 1, linetype = "dashed", color = "red") +
geom_segment(aes(x = n - 0.5, xend = n - 0.5, y = predicted_value, yend = prediction_sample),
linetype = "dotted", color = "blue") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 0.5, linetype = "dashed", color = "red") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create a data frame for plotting
plot_df <- data.frame(
Time = 1:n,
Observed = ts_data,
Sample = c(rep("Estimation Sample", n - 1), "Out-of-Sample"),
Fitted = c(fitted(model), predicted_value)
)
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 0.5, linetype = "dashed", color = "red") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Prediction Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
# Create the plot using ggplot2
p <- ggplot(plot_df, aes(x = Time)) +
geom_line(aes(y = Fitted, color = "Fitted Model"), size = 1) +
geom_point(aes(y = Observed, color = Sample), size = 2) +
geom_vline(xintercept = n - 0.5, linetype = "dashed", color = "red") +
scale_x_continuous(limits = c(0, n + 10)) +  # Add extra margin
labs(title = "Estimation vs. Prediction Sample with Forecast Error",
x = "Time", y = "Value",
color = "Legend", shape = "Sample Type") +
scale_color_manual(values = c("Observed" = "grey",
"Fitted Model" = "blue",
"Estimation Sample" = "black",
"Out-of-Sample" = "orange")) +
theme_minimal()
# Convert ggplot2 plot to plotly object for interactivity
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
xaringan::inf_mr()
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(plotly)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(forecast)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(fpp3)
library(kableExtra)
library(DT)
library(feasts)
library(tsibble)
library(tsibbledata)
library(lubridate)
X=HT %>%
modelSNAIVE(M ~ lag("year"))
X=HT %>%
model(SNAIVE(M ~ lag("year")))
sd(X$`SNAIVE(M ~ lag("year"))`[[1]]$fit$.resid, na.rm=TRUE)
Marriages_train=HT%>%
filter(as.numeric(ANIO_REGIS) < 2010)
FC=Marriages_train %>%
model(
Mean = MEAN(M),
`Naïve` = NAIVE(M),
`Seasonal naïve` = SNAIVE(M))%>%
forecast(h = 10, level=NULL)
FC%>%autoplot(HT)
HT2=HT%>%filter(as.numeric(ANIO_REGIS) < 2012)
FC%>%autoplot(HT2)
FC%>%autoplot(HT2, level=NULL)
HT2=HT%>%filter(as.numeric(ANIO_REGIS) < 2011)
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_6_slides_a.html")
