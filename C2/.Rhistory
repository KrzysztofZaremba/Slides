xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
table(Health_data$gender,Health_data$diabetes)
table(Health_data$location_type,Health_data$diabetes)
933/(933+8906)
993/(993+8906)
knitr::opts_chunk$set(echo = TRUE, dpi=300)
library(shiny)
library(ggplot2)
library(forecast)
library(plotly)
library(dplyr)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(hrbrthemes)
library(viridis)
library(reshape2)
library(gapminder)
library(knitr)
library(kableExtra)
library(DT)
library(patchwork)
options(scipen = 999)
table( Health_data$Mother_diabetes,Health_data$diabetes)
Health_data$Mother_diabetes
conjunto_de_datos_gastoshogar_enigh_2018_ns <- read.csv("C:/Users/kzysi/Dropbox/Itam_teaching/Data/Spending_Income/conjunto_de_datos_gastoshogar_enigh_2018_ns/conjunto_de_datos/conjunto_de_datos_gastoshogar_enigh_2018_ns.csv")
conjunto_de_datos_gastospersona_enigh_2018_ns <- read.csv("C:/Users/kzysi/Dropbox/Itam_teaching/Data/Spending_Income/conjunto_de_datos_gastospersona_enigh_2018_ns/conjunto_de_datos/conjunto_de_datos_gastospersona_enigh_2018_ns.csv")
conjunto_de_datos_poblacion_enigh_2018_ns <- read.csv("C:/Users/kzysi/Dropbox/Itam_teaching/Data/Spending_Income/conjunto_de_datos_poblacion_enigh_2018_ns/conjunto_de_datos/conjunto_de_datos_poblacion_enigh_2018_ns.csv")
##I want people attending schools
# nivel (11) is normal
#tipoesc 1,2,3 1 public, 2 private
## who deos not live with paretnts so madre_hog and padre_hog is 2
## residencia (5 years ago) - pais oo entidad, is it the same as now?
##hor_1 how much time work
##hor_2 how much time they study
## act_pnea1 - 4 is a student but for people who are not currently active... I could have both working and studying
##folio_viv, folio_hog, numner, sexo, edad
library(tidyverse)
table(conjunto_de_datos_poblacion_enigh_2018_ns$nivel, useNA = "always")
xaringan::moon_reader
xaringan::moon_reader()
xaringan::inf_mr()
knitr::opts_chunk$set(echo = TRUE, dpi=300)
p=ggplot(data = Household_data, aes(x = monthly_income, y = health_spending)) +
geom_point() +
labs(x = "Income", y = "Health Spending",
color = "City") +
theme_xaringan()+
geom_segment(data = dataset[100, ],
aes(xend = monthly_income, yend = health_spending, x = monthly_income, y = 0),
linetype = "dashed", color = "blue") +
geom_segment(data = dataset[100, ],
aes(xend = monthly_income, yend = health_spending, x = 0, y = health_spending),
linetype = "dashed", color = "blue") +
geom_point(data = dataset[100, ],
aes(x = monthly_income, y = health_spending), color = "red", size = 3) +
geom_text(data = dataset[100, ],
aes(label = paste("(", monthly_income, ",", health_spending, ")")),
vjust = -1, size=7) +
theme(legend.position = "none")
ggplotly(p,
width = 800,   # Adjust the width according to your preference
height = 700)
p=ggplot(data = Household_data, aes(x = monthly_income, y = health_spending)) +
geom_point() +
labs(x = "Income", y = "Health Spending",
color = "City") +
theme_xaringan()+
geom_segment(data = Household_data[100, ],
aes(xend = monthly_income, yend = health_spending, x = monthly_income, y = 0),
linetype = "dashed", color = "blue") +
geom_segment(data = Household_data[100, ],
aes(xend = monthly_income, yend = health_spending, x = 0, y = health_spending),
linetype = "dashed", color = "blue") +
geom_point(data = Household_data[100, ],
aes(x = monthly_income, y = health_spending), color = "red", size = 3) +
geom_text(data = Household_data[100, ],
aes(label = paste("(", monthly_income, ",", health_spending, ")")),
vjust = -1, size=7) +
theme(legend.position = "none")
ggplotly(p,
width = 800,   # Adjust the width according to your preference
height = 700)
# Load required library
Household_data=Household_data[,c(1,2,3,5,10)]
#remotes::install_github("jhelvy/renderthis", dependencies = TRUE)
#install.packages("chromote")
#install.packages("renderthis")
library(renderthis)
to_pdf("C_2_slides_c.html")
#install.packages("chromote")
#install.packages("renderthis")
library(renderthis)
to_pdf("C_2_slides_c.html")
pagedown::chrome_print(input = "C_2_slides_c.html", output = "C_2_slides_c.pdf", timeout = 300)
#
# usethis::g
to_pdf("C_2_slides_d.html")
pagedown::chrome_print(input = "C_2_slides_d.html", output = "C_2_slides_d.pdf", timeout = 300)
library(renderthis)
to_pdf("C_2_slides_d.html")
#remotes::install_github("jhelvy/renderthis", dependencies = TRUE)
#install.packages("chromote")
#install.packages("renderthis")
library(renderthis)
to_pdf("C_2_slides_c.html")
pagedown::chrome_print(input = "C_2_slides_c.html", output = "C_2_slides_c.pdf", timeout = 300)
library(renderthis)
to_pdf("C_2_slides_c.html")
library(renderthis)
to_pdf("C_2_slides_c.html")
pagedown::chrome_print(input = "C_2_slides_c.html", output = "C_2_slides_c.pdf", timeout = 300)
pagedown::chrome_print(input = "C_2_slides_a.html", output = "C_2_slides_a.pdf", timeout = 300)
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_1_slides_no_map.html")
#remotes::install_github("jhelvy/renderthis", dependencies = TRUE)
#install.packages("chromote")
#install.packages("renderthis")
library(renderthis)
to_pdf("C_2_slides_c.html")
#install.packages("chromote")
#install.packages("renderthis")
remotes::install_github('yihui/servr')
# usethis::git_sitrep()
#
#
# install.packages("usethis")
# library(usethis)
# usethis::git_sitrep()
#
# usethis::browse_github_pat()
#
# usethis::edit_r_environ()
gitcreds::gitcreds_set()
#install.packages("chromote")
#install.packages("renderthis")
remotes::install_github('yihui/servr')
Sys.unsetenv("GITHUB_PAT")
Sys.getenv("GITHUB_PAT")
library(renderthis)
to_pdf("C_2_slides_c.html")
#install.packages("chromote")
#install.packages("renderthis")
remotes::install_github('yihui/servr')
library(renderthis)
to_pdf("C_2_slides_c.html")
pagedown::chrome_print(input = "C_2_slides_c.html", output = "C_2_slides_c.pdf", timeout = 300)
library(renderthis)
to_pdf("C_2_slides_a.html")
pagedown::chrome_print(input = "C_2_slides_a.html", output = "C_2_slides_a.pdf", timeout = 300)
library(fixest)
library(tidyverse)
load("C:/Users/kzysi/Dropbox/Flu_Covid/Flu/dane_grypa/pooled/clean_codes/output/Infection_data.Rda")
###peak is endogenous... so Let me try to do the peak on the national level
###first find the peaks - in age group 5-14 (the one affected by the vacation directly):
##measure peaks as cases per doctor?
dpt_l_longa=dpt_l_long%>%
group_by(Season_Year,Season_Week)%>%
summarize(total_cases=sum(cases,na.rm=TRUE),total_doctors=sum(measurement.y,na.rm=TRUE))%>% ### calculate per doctor
mutate(cpd=total_cases/total_doctors)
##plot
ggplot(dpt_l_longa, aes(x=Season_Week, y=total_cases)) +
geom_line()+
geom_point()+
xlab("Season_Year")+
ylab("Cases per doctor")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="darkgrey"),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
strip.background=element_rect(fill=NA, color="black"),
strip.text=element_text(size=20))+
theme(text = element_text(size=30),legend.position="none")+
facet_wrap(~Season_Year)
## eliminate season years which have less than 100 cases total - can't identify peak from the data
dpt_l_longa2=dpt_l_longa%>%
group_by(Season_Year)%>%
summarize(sum(total_cases), n=n())%>%
filter(`sum(total_cases)`>200 & n>35)%>%
mutate(sw=paste(Season_Year))
##plot it
ggplot(dpt_l_longa2, aes(x=Season_Year, y=n)) +
geom_line()+
geom_point()+
xlab("Season_Year")+
ylab("Cases per doctor")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="darkgrey"),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
strip.background=element_rect(fill=NA, color="black"),
strip.text=element_text(size=20))+
theme(text = element_text(size=30),legend.position="none")+
ylim(0,60)
##keep only those with more than 100 cases
dpt_l_long=dpt_l_long%>%
mutate(sw=paste(Season_Year))%>%
filter(sw %in% dpt_l_longa2$sw)
dpt_l_long=dpt_l_long%>%
group_by(Season_Year,Season_Week)%>%
mutate(total_cases=sum(cases,na.rm=TRUE),total_doctors=sum(measurement.y,na.rm=TRUE))%>%
mutate(cpd=total_cases/total_doctors)%>%
group_by(Season_Year)%>%
mutate(Peak_ind=which.max(total_cases)[1], Peak_week=Season_Week[Peak_ind])
##how to deal with multiple peaks - aggregate it on the woj level?
hist(dpt_l_long$Peak_week, breaks=seq(0,53,1), main="Peak week distribution", xlab="Week")
#dpt_l_long$Peak_week[dpt_l_long$Peak_week<15|dpt_l_long$Peak_week>40]=NA
##discard the one at 0 and the one at 48
dpt_l_long=dpt_l_long%>%
filter(Peak_week>1 & Peak_week<48)
##distance between vacation and peak
dpt_l_long=dpt_l_long%>%
group_by(Season_Year,Kod,age_group)%>%
mutate(Distance=Season_Ferie-Peak_week)
##data by season and woj
dpt_l_long_agg=dpt_l_long%>%
group_by(Season_Year,woj)%>%
summarize(PW=unique(Peak_week))
##draw histogram, but with shares, use ggplot
ggplot(dpt_l_long_agg, aes(x=PW)) +
geom_histogram(aes(y=..count../sum(..count..)), binwidth = 1, fill="lightblue", color="black")+
xlab("Peak week")+
ylab("Share")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color="darkgrey"),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
strip.background=element_rect(fill=NA, color="black"))+
theme(text = element_text(size=30),legend.position="none")+
xlim(1,48)
ggsave(paste0("output/Revision_2/Peaks_distribution.png"), width = 30, height = 20, units = "cm")
Peaks=dpt_l_long[,c("Season_Year","Peak_week","Kod")]
saveRDS(Peaks, "output/Revision_2/Peaks.Rda")
save(Peaks, "output/Revision_2/Peaks.Rda")
save(Peaks, file="output/Revision_2/Peaks.Rda")
saveRda(Peaks, file="output/Revision_2/Peaks.Rda")
save(Peaks, file="Peaks.Rda")
save(Peaks, file="Peaks_heterogeneity.Rda")
getwd()
