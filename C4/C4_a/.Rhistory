)
# Define the server logic
server <- function(input, output) {
output$regressionPlot <- renderPlotly({
set.seed(17)
x <- (1:24) * 2
y <- 24 + x * input$slope + input$variance * rnorm(length(x))
data <- data.frame(x, y)
p <- ggplot(data, aes(x, y)) +
geom_point(pch = 19, cex = 0.8) +
geom_smooth(method = "lm", formula = y ~ x, color = "blue", se = FALSE) +
labs(title = "Linear Regression Plot",
x = "X",
y = "Y") +
theme_minimal()
ggplotly(p)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
runApp('Linear_regression')
runApp('Linear_regression')
set.seed(17)
x <- rnorm(0,5)
y <- 3 + x * input$slope + input$variance * rnorm(length(x))
data <- data.frame(x, y)
y <- 3 + x * input$slope + input$variance * rnorm(length(x))
y=3 + x * 2 + 1 * rnorm(length(x))
data <- data.frame(x, y)
rnorm(0,5)
x <- rnorm(50,0,5)
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runif(20, -10, 10)
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
shiny::runApp('Linear_regression')
runApp('Linear_regression')
?add_text()
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
var(Daily_CMX$TMP)
var(Daily_CMX$TMP)*(1805)
xaringan::inf_mr()
var(Daily_CMX$TMP)*(1805)
var(Daily_CMX$Trips)*(781)
var(Data_BP)*(780)
var(Data_BP$Trips)*(780)
var(Data_BP$TMP)*(780)
723.55*4043.965/24012556582
var(Data_BP$TMP)*(780)
var(Data_BP$Trips)*(780)
var(Data_BP$Trips)
View(Data_BP)
sd(Data_BP$Trips)
723.55*4043.965
723.55^2*4043.965/24012556582
xaringan::inf_mr()
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(forecast)
library(plotly)
library(dplyr)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(kableExtra)
library(DT)
coef_summary$coefficients
coef_summary$coefficients[1]
coef_summary$coefficients[2]
sample[1:sample_size]
?sample
sample(1:sample_size,sample_size)
set.seed(5645)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
sample_data
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(5645)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
warnings()
xaringan::inf_mr()
xaringan::inf_mr()
723.55-1.96*83
723.55+1.96*83
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(forecast)
library(plotly)
library(dplyr)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(kableExtra)
library(DT)
# Fit a linear regression model
lm_model <- lm(Trips ~ PM10, data = Data_BP)
# Display the summary of the linear regression model
summary(lm_model)
new_disp <- data.frame(disp= c(30))
predict(lm_model, newdata = new_disp, interval = "predict", level = 0.95)
mean(Data_BP$TMP)
sum(resid(model)^2)
resid(model)
summary(lm_model)
resid(lm_model)
sum(resid(model)^2)
sum(resid(lm_model)^2)
sqrt(21895427100)
sqrt(21895427100/779)
var(Data_BP$TMP)*780
sqrt(21895427100/781)
16892.66+723.55*30
(1/781+(30-16.96)^2/4044)
sqrt((1/781+(30-16.96)^2/4044))
(1/781+(30-16.96)^2/4044)*1.96*5301.613
(1/781+(30-16.96)^2/4044+1)*1.96*5301.613
10841.39+ 38599.16
(1/781+(30-16.96)^2/4044)*1.96*550.613
(1/781+(30-16.96)^2/4044)*1.96*5501.613
38599.16+450.2312
38599.23-36434.32
(38599.23-36434.32)/1.96
(38599.23-36434.32)/1.96
1104.546/2
---
### Confidence Intervals
anova(lm_model)
sum((Data_BP$TMP - mean(Data_BP$TMP))^2)
mean(Data_BP$TMP)
(1/781+((30-16.96)^2)/4044)*1.96*5301.613
1.96*5301.613
((30-16.96)^2)/4044
1100=10391.16
(1/781+((30-16.96)^2)/4044)
1100/10391.16
(0.1058592+1)*10391.16
11491.16+38599.23
(1/781+((30-16.96)^2)/4044)
(1/781+((30-16.96)^2)/4044)*1.96*5301.613
?predict
lm_model
a=predict(lm_model, newdata = new_data, interval = "confidence", level = 0.95)
View(a)
predict(lm_model, newdata = new_data, interval = "confidence", level = 0.95, se.fit=TRUE)
predict(lm_model, newdata = new_data, interval = "predict", level = 0.95, se.fit=TRUE)
(1/781+((30-16.96)^2)/4044)*5301.613
1102.861/5301.613
1/781
((30-16.96)^2)/4044
(30-16.96)^2
View(lm_model)
vcov(lm_model)
1102.851*1.96
1102.851*1.96+38599.23
(1/781+((30-16.96)^2)/4044)*5301.613
sqrt(1/781+((30-16.96)^2)/4044)*5301.613
library(renderthis)
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
remotes::install_github('rstudio/chromote')
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
xaringan::inf_mr()
runApp('Scaling_variables')
xaringan::inf_mr()
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
shiny::runApp('Guess_the_line')
runApp('Guess_the_line')
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
xaringan::inf_mr()
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
remotes::install_github('rstudio/chromote')
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
xaringan::inf_mr()
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
3040/19
160/6000
sqrt(0.02666667)
0.4/0.1633
(60-32.5)^2
(60-32.5)^2/6000
1/21+0.1260417+!
1/21+0.1260417+1
1/21+0.1260417+1
sqrt(1.173661)*12.649
xaringan::moon_reader
xaringan::moon_reader
xaringan::moon_reader()
xaringan::inf_mr()
xaringan::inf_mr()
0.6574*sqrt(328.8626)/sqrt(5.6319)
5.6319*13
0.6574^2
328.8626-328.8626*0.43
328.8626*13-328.8626*0.43*13
2436.872/12
sqrt(202.3/72.214)
1.6737*1.65+5.023
1.6737*1.96+5.023
library(renderthis)
remotes::install_github('rstudio/chromote')
install.packages("renderthis")
lm(finalprice ~ bidders, data = auctions)
library(probstats4econ)
lm(finalprice ~ bidders, data = auctions)
#or code for linear regression in R
x=lm(finalprice ~ bidders, data = auctions)
summary(x)
auctions$bidders
where \(r_{xy}\) is the correlation between \(x\) (lot area) and \(y\) (sale price),
houseprices$lotarea
mean(houseprices$lotarea)
#or code for linear regression in R
x=lm(finalprice ~ bidders, data = auctions) #lm stands for linear model. the formula has form y~x and then we put data.
summary(x)
#or code for linear regression in R
x=lm(saleprice ~ lotarea, data = houseprices) #lm stands for linear model. the formula has form y~x and then we put data.
summary(x)
model <- lm(bmi_h ~ bmi_w, data = married)
summary(model)
# Run a regression of saleprice on lotarea
x=lm(saleprice ~ lotarea, data = houseprices)
x$fitted.values #here you will find predicted values (yhats)
# Run a regression of saleprice on lotarea
x=lm(saleprice ~ lotarea, data = houseprices)
summary(x)
SST <- sum((y - mean(y))^2)
y=houseprices$saleprice
SST <- sum((y - mean(y))^2)
SSR <- sum((yhat - mean(y))^2)
yhat=x$fitted.values #here you will find predicted values (yhats)
my=
SST <- sum((y - mean(y))^2)
SSR <- sum((yhat - mean(y))^2)
SSE <- sum((y - yhat)^2) #or sum(e^2)
my=
SST <- sum((y - my)^2)
SSR <- sum((yhat - my)^2)
SSE <- sum((y - yhat)^2) #or sum(e^2)
c(SST = SST, SSR = SSR, SSE = SSE)
# lm(bweight ~ age_months, data = births)
table(married$educ_w)
# lm(bweight ~ age_months, data = births)
table(married$age_2)
# lm(bweight ~ age_months, data = births)
table(married$age_w)
reg
# Step 0: fit regression (keep your variable names)
reg = lm(saleprice ~ lotarea, data = houseprices)
library(probstats4econ)
# Step 0: fit regression (keep your variable names)
reg = lm(saleprice ~ lotarea, data = houseprices)
summary(reg)
houseprices
lm(medical_cost~male, data=hrs)
lm(medical_costs~male, data=hrs)
summary(m)
m=lm(medical_costs~male, data=hrs)
summary(m)
m=lm(doctor_visits~male, data=hrs)
summary(m)
cps$earnwk
cps$educ
s=lm(earnwk ~ educ, data = cps)
summary(s)
```
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(forecast)
library(plotly)
library(dplyr)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(kableExtra)
library(DT)
load("Daily_CMX_means2.Rda")
View(Data_BP)
df <- Data_BP %>%
select(TMP, Trips) %>%
filter(!is.na(TMP), !is.na(Trips))
df
# Fit regression: Trips on temperature (Celsius)
fit <- lm(Trips ~ TMP, data = df)
# Prediction at 30°C (mean prediction + 95% CI)
x0 <- 30
new <- data.frame(TMP = x0)
pred_ci <- as.data.frame(predict(fit, newdata = new, interval = "confidence", level = 0.95))
yhat <- pred_ci$fit
ylo  <- pred_ci$lwr
yhi  <- pred_ci$upr
# Build plot
ggplot(df, aes(x = TMP, y = Trips)) +
geom_point(alpha = 0.35, size = 1.8) +
# OLS line with 95% confidence band
geom_smooth(method = "lm", se = TRUE, level = 0.95) +
# Vertical guide from x=30 up to the regression line (predicted value)
geom_segment(aes(x = x0, xend = x0, y = min(Trips, na.rm = TRUE), yend = yhat),
linetype = "dashed", linewidth = 0.7, color = "black") +
# Point at the predicted value
geom_point(aes(x = x0, y = yhat), color = "red", size = 3) +
# 95% CI for the mean prediction at x=30 as a vertical error bar
geom_errorbar(aes(x = x0, ymin = ylo, ymax = yhi), width = 0.2, color = "red", linewidth = 0.7) +
# Labels/annotation
annotate("text", x = x0, y = yhat, label = sprintf("ŷ(30°C)=%.0f", yhat),
vjust = -1, color = "red", fontface = "bold") +
labs(
title = "Prediction Illustration at 30°C",
subtitle = "Scatter, OLS fit with 95% CI, vertical guide to ŷ(30°C) and its CI",
x = "Temperature (°C)",
y = "Trips"
) +
theme_minimal(base_size = 12)
df <- Data_BP %>%
filter(!is.na(TMP), !is.na(Trips))
# Fit regression: Trips on temperature (Celsius)
fit <- lm(Trips ~ TMP, data = df)
# Generate prediction grid up to 40 °C
grid <- data.frame(TMP = seq(min(df$TMP, na.rm = TRUE), 40, by = 0.5))
grid_pred <- cbind(grid, predict(fit, newdata = grid, interval = "confidence", level = 0.95))
# Prediction at 30°C (mean prediction + 95% CI)
x0 <- 30
new <- data.frame(TMP = x0)
pred_ci <- as.data.frame(predict(fit, newdata = new, interval = "confidence", level = 0.95))
yhat <- pred_ci$fit
ylo  <- pred_ci$lwr
yhi  <- pred_ci$upr
# Build plot
ggplot() +
# Raw data points
geom_point(data = df, aes(x = TMP, y = Trips), alpha = 0.35, size = 1.8) +
# Regression line extrapolated to 40
geom_line(data = grid_pred, aes(x = TMP, y = fit), color = "blue", linewidth = 1) +
# Confidence band extrapolated to 40
geom_ribbon(data = grid_pred, aes(x = TMP, ymin = lwr, ymax = upr),
fill = "blue", alpha = 0.2) +
# Vertical line from x=30 to regression line
geom_segment(aes(x = x0, xend = x0, y = min(df$Trips, na.rm = TRUE), yend = yhat),
linetype = "dashed", linewidth = 0.7, color = "black") +
# Point at predicted value
geom_point(aes(x = x0, y = yhat), color = "red", size = 3) +
# Error bar for 95% CI at x=30
geom_errorbar(aes(x = x0, ymin = ylo, ymax = yhi), width = 0.3, color = "red", linewidth = 0.8) +
# Annotation
annotate("text", x = x0, y = yhat, label = sprintf("ŷ(30°C)=%.0f", yhat),
vjust = -1.2, color = "red", fontface = "bold") +
labs(
title = "Prediction Illustration (Extrapolated to 40°C)",
subtitle = "OLS fit with 95% CI, vertical guide to ŷ(30°C)",
x = "Temperature (°C)",
y = "Trips"
) +
theme_minimal(base_size = 12)
# Build plot
ggplot() +
# Raw data points
geom_point(data = df, aes(x = TMP, y = Trips), alpha = 0.35, size = 1.8) +
# Regression line extrapolated to 40
geom_line(data = grid_pred, aes(x = TMP, y = fit), color = "blue", linewidth = 1) +
# Vertical line from x=30 to regression line
geom_segment(aes(x = x0, xend = x0, y = min(df$Trips, na.rm = TRUE), yend = yhat),
linetype = "dashed", linewidth = 0.7, color = "black") +
# Point at predicted value
geom_point(aes(x = x0, y = yhat), color = "red", size = 3) +
# Error bar for 95% CI at x=30
geom_errorbar(aes(x = x0, ymin = ylo, ymax = yhi), width = 0.3, color = "red", linewidth = 0.8) +
labs(
title = "Prediction Illustration",
x = "Temperature (°C)",
y = "Trips"
) +
theme_minimal(base_size = 12)+
ylim(0,NA)
m=reg(return_1yr~manager_tenure  ,   data=mutualfunds)
m=lm(return_1yr~manager_tenure  ,   data=mutualfunds)
summary(m)
m=lm(return_1yr~aum,   data=mutualfunds)
summary(m)
m=lm(saleprice~bathrooms,   data=houseprices)
houseprices
m=lm(saleprice~fullbath,   data=houseprices)
summary(m)
#hint: to get sigma: summary(model)$sigma
summary(model)$sigma
55100/971
sqrt(56.74562)
summary(m)$sigma
e <- residuals(m)          # residuals
n <- length(e)                 # sample size
k <- length(coef(m))       # number of parameters
sqrt(sum(e^2) / (n - k))
shiny::runApp('Guess_the_line')
