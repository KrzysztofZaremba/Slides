geom_smooth(method = "lm", se = FALSE, color = "blue", alpha=0.1) +
labs(title = "Population Regression",
x = "X",
y = "Y") +
theme_xaringan() +
geom_hline(yintercept = 0, color = "black") +  # Add horizontal line at y = 0
geom_vline(xintercept = 0, color = "black")
gg
gg <- ggplot(data, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue", alpha=0.01) +
labs(title = "Population Regression",
x = "X",
y = "Y") +
theme_xaringan() +
geom_hline(yintercept = 0, color = "black") +  # Add horizontal line at y = 0
geom_vline(xintercept = 0, color = "black")
# Generate some sample data
set.seed(123)
x <- rnorm(100)
y <- 2 + 3 * x + rnorm(100, sd=3)
# Create a data frame
data <- data.frame(x, y)
# Fit a linear regression model on the full dataset
full_model <- lm(y ~ x, data)
# Create a scatter plot with the best fit line and deviations
gg <- ggplot(data, aes(x = x, y = y)) +
geom_point(color = "black", color = "lightgray", alpha = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "lightgray", alpha=0.01) +
labs(title = "Population Regression",
x = "X",
y = "Y") +
theme_xaringan() +
geom_hline(yintercept = 0, color = "black") +  # Add horizontal line at y = 0
geom_vline(xintercept = 0, color = "black")
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[1:sample_size, ]
# Fit a new linear regression model on the sample
sample_model <- lm(y ~ x, sample_data)
# Add the new best fit line for the sample
gg <- gg +
geom_smooth(data = sample_data, aes(x = x, y = y), method = "lm", se = FALSE, color = "green") +
geom_segment(data = sample_data, aes(xend = x, yend = predict(sample_model, sample_data)), color = "gray", alpha = 0.2, linetype = "dashed")
print(gg)
# Add the new best fit line for the sample
gg <- gg +
geom_smooth(data = sample_data, aes(x = x, y = y), method = "lm", se = FALSE, color = "green") +
geom_segment(data = sample_data, aes(xend = x, yend = predict(sample_model, sample_data)), color = "black", alpha = 0.2, linetype = "dashed")
print(gg)
# Create a scatter plot with the best fit line and deviations
gg <- ggplot(data, aes(x = x, y = y)) +
geom_point(color = "lightgray", alpha = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "lightgray", alpha=0.01) +
labs(title = "Population Regression",
x = "X",
y = "Y") +
theme_xaringan() +
geom_hline(yintercept = 0, color = "black") +  # Add horizontal line at y = 0
geom_vline(xintercept = 0, color = "black")
# Create a scatter plot with the best fit line and deviations
gg <- ggplot(data, aes(x = x, y = y)) +
geom_point(color = "lightgray", alpha = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "lightgray", alpha=0.01) +
labs(title = "Population Regression",
x = "X",
y = "Y") +
theme_xaringan() +
geom_hline(yintercept = 0, color = "black") +  # Add horizontal line at y = 0
geom_vline(xintercept = 0, color = "black")
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[1:sample_size, ]
# Fit a new linear regression model on the sample
sample_model <- lm(y ~ x, sample_data)
# Add the new best fit line for the sample
gg <- gg +
geom_point(data = sample_data, color = "black"") +
geom_smooth(data = sample_data, aes(x = x, y = y), method = "lm", se = FALSE, color = "green") +
# Create a scatter plot with the best fit line and deviations
gg <- ggplot(data, aes(x = x, y = y)) +
geom_point(color = "lightgray", alpha = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "lightgray", alpha=0.01) +
labs(title = "Population Regression",
x = "X",
y = "Y") +
theme_xaringan() +
geom_hline(yintercept = 0, color = "black") +  # Add horizontal line at y = 0
geom_vline(xintercept = 0, color = "black")
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[1:sample_size, ]
# Fit a new linear regression model on the sample
sample_model <- lm(y ~ x, sample_data)
# Add the new best fit line for the sample
gg <- gg +
geom_point(data = sample_data, color = "black"") +
geom_smooth(data = sample_data, aes(x = x, y = y), method = "lm", se = FALSE, color = "green") +
# Fit a linear regression model on the full dataset
full_model <- lm(y ~ x, data)
# Create a scatter plot with the best fit line and deviations
gg <- ggplot(data, aes(x = x, y = y)) +
geom_point(color = "lightgray", alpha = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "lightgray", alpha=0.01) +
labs(title = "Population Regression",
x = "X",
y = "Y") +
theme_xaringan() +
geom_hline(yintercept = 0, color = "black") +  # Add horizontal line at y = 0
geom_vline(xintercept = 0, color = "black")
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[1:sample_size, ]
# Fit a new linear regression model on the sample
sample_model <- lm(y ~ x, sample_data)
# Add the new best fit line for the sample
gg <- gg +
geom_point(data = sample_data, color = "black") +
geom_smooth(data = sample_data, aes(x = x, y = y), method = "lm", se = FALSE, color = "green") +
geom_segment(data = sample_data, aes(xend = x, yend = predict(sample_model, sample_data)), color = "black", alpha = 0.2, linetype = "dashed")
print(gg)
# Create a scatter plot with the best fit line and deviations
gg <- ggplot(data, aes(x = x, y = y)) +
geom_point(color = "lightgray", alpha = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "lightgray", alpha=0.01) +
labs(title = "Population Regression",
x = "X",
y = "Y") +
theme_xaringan() +
geom_hline(yintercept = 0, color = "black") +  # Add horizontal line at y = 0
geom_vline(xintercept = 0, color = "black")
# Add the new best fit line for the sample
gg <- gg +
geom_point(data = sample_data, color = "black") +
geom_smooth(data = sample_data, aes(x = x, y = y), method = "lm", se = FALSE, color = "green") +
geom_segment(data = sample_data, aes(xend = x, yend = predict(sample_model, sample_data)), color = "black", alpha = 0.2, linetype = "dashed")
# Generate some sample data
set.seed(123)
x <- rnorm(100)
y <- 2 + 3 * x + rnorm(100, sd=3)
# Create a data frame
data <- data.frame(x, y)
# Fit a linear regression model on the full dataset
full_model <- lm(y ~ x, data)
# Create a scatter plot with the best fit line and deviations
gg <- ggplot(data, aes(x = x, y = y)) +
geom_point(color = "lightgray", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "lightgray", alpha=0.01) +
labs(title = "Population Regression",
x = "X",
y = "Y") +
theme_xaringan() +
geom_hline(yintercept = 0, color = "black") +  # Add horizontal line at y = 0
geom_vline(xintercept = 0, color = "black")
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[1:sample_size, ]
# Fit a new linear regression model on the sample
sample_model <- lm(y ~ x, sample_data)
# Add the new best fit line for the sample
gg <- gg +
geom_point(data = sample_data, color = "black") +
geom_smooth(data = sample_data, aes(x = x, y = y), method = "lm", se = FALSE, color = "green") +
geom_segment(data = sample_data, aes(xend = x, yend = predict(sample_model, sample_data)), color = "black", alpha = 0.2, linetype = "dashed")
print(gg)
xaringan::inf_mr()
xaringan::inf_mr()
Data_BP$TMP=round(Data_BP$TMP,2)
Data_BP$PM2.5=round(Data_BP$PM2.5,2)
save(Data_BP, file="Daily_CMX_means2.Rda")
xaringan::inf_mr()
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
runApp('~/Linear_regression')
shiny::runApp('~/Rsquared')
runApp('Rsquared')
library(shiny)
library(plotly)
# Define the UI
ui <- fluidPage(
titlePanel("SST and SSE Interactive Visualization"),
sidebarLayout(
sidebarPanel(
sliderInput("slope", "Slope:", min = 0, max = 2, value = 0.125, step = 0.025),
sliderInput("variance", "Variance:", min = 0, max = 20, value = 8, step = 1)
),
mainPanel(
plotlyOutput("regressionPlot")
)
)
)
# Define the server logic
server <- function(input, output) {
output$regressionPlot <- renderPlotly({
set.seed(17)
x <- (1:24) * 2
y <- 24 + x * input$slope + input$variance * rnorm(length(x))
data <- data.frame(x, y)
p <- ggplot(data, aes(x, y)) +
geom_point(pch = 19, cex = 0.8) +
geom_smooth(method = "lm", formula = y ~ x, color = "blue", se = FALSE) +
labs(title = "Linear Regression Plot",
x = "X",
y = "Y") +
theme_minimal()
ggplotly(p)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
runApp('Linear_regression')
runApp('Linear_regression')
set.seed(17)
x <- rnorm(0,5)
y <- 3 + x * input$slope + input$variance * rnorm(length(x))
data <- data.frame(x, y)
y <- 3 + x * input$slope + input$variance * rnorm(length(x))
y=3 + x * 2 + 1 * rnorm(length(x))
data <- data.frame(x, y)
rnorm(0,5)
x <- rnorm(50,0,5)
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runif(20, -10, 10)
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
shiny::runApp('Linear_regression')
runApp('Linear_regression')
?add_text()
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
runApp('Linear_regression')
var(Daily_CMX$TMP)
var(Daily_CMX$TMP)*(1805)
xaringan::inf_mr()
var(Daily_CMX$TMP)*(1805)
var(Daily_CMX$Trips)*(781)
var(Data_BP)*(780)
var(Data_BP$Trips)*(780)
var(Data_BP$TMP)*(780)
723.55*4043.965/24012556582
var(Data_BP$TMP)*(780)
var(Data_BP$Trips)*(780)
var(Data_BP$Trips)
View(Data_BP)
sd(Data_BP$Trips)
723.55*4043.965
723.55^2*4043.965/24012556582
xaringan::inf_mr()
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(forecast)
library(plotly)
library(dplyr)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(kableExtra)
library(DT)
coef_summary$coefficients
coef_summary$coefficients[1]
coef_summary$coefficients[2]
sample[1:sample_size]
?sample
sample(1:sample_size,sample_size)
set.seed(5645)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
sample_data
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(124)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
set.seed(5645)
# Create a filtered dataset for the sample (e.g., the first 40 points)
sample_size <- 40
sample_data <- data[sample(1:sample_size,sample_size), ]
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
sample(1:sample_size,sample_size)
warnings()
xaringan::inf_mr()
xaringan::inf_mr()
723.55-1.96*83
723.55+1.96*83
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(forecast)
library(plotly)
library(dplyr)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(kableExtra)
library(DT)
# Fit a linear regression model
lm_model <- lm(Trips ~ PM10, data = Data_BP)
# Display the summary of the linear regression model
summary(lm_model)
new_disp <- data.frame(disp= c(30))
predict(lm_model, newdata = new_disp, interval = "predict", level = 0.95)
mean(Data_BP$TMP)
sum(resid(model)^2)
resid(model)
summary(lm_model)
resid(lm_model)
sum(resid(model)^2)
sum(resid(lm_model)^2)
sqrt(21895427100)
sqrt(21895427100/779)
var(Data_BP$TMP)*780
sqrt(21895427100/781)
16892.66+723.55*30
(1/781+(30-16.96)^2/4044)
sqrt((1/781+(30-16.96)^2/4044))
(1/781+(30-16.96)^2/4044)*1.96*5301.613
(1/781+(30-16.96)^2/4044+1)*1.96*5301.613
10841.39+ 38599.16
(1/781+(30-16.96)^2/4044)*1.96*550.613
(1/781+(30-16.96)^2/4044)*1.96*5501.613
38599.16+450.2312
38599.23-36434.32
(38599.23-36434.32)/1.96
(38599.23-36434.32)/1.96
1104.546/2
---
### Confidence Intervals
anova(lm_model)
sum((Data_BP$TMP - mean(Data_BP$TMP))^2)
mean(Data_BP$TMP)
(1/781+((30-16.96)^2)/4044)*1.96*5301.613
1.96*5301.613
((30-16.96)^2)/4044
1100=10391.16
(1/781+((30-16.96)^2)/4044)
1100/10391.16
(0.1058592+1)*10391.16
11491.16+38599.23
(1/781+((30-16.96)^2)/4044)
(1/781+((30-16.96)^2)/4044)*1.96*5301.613
?predict
lm_model
a=predict(lm_model, newdata = new_data, interval = "confidence", level = 0.95)
View(a)
predict(lm_model, newdata = new_data, interval = "confidence", level = 0.95, se.fit=TRUE)
predict(lm_model, newdata = new_data, interval = "predict", level = 0.95, se.fit=TRUE)
(1/781+((30-16.96)^2)/4044)*5301.613
1102.861/5301.613
1/781
((30-16.96)^2)/4044
(30-16.96)^2
View(lm_model)
vcov(lm_model)
1102.851*1.96
1102.851*1.96+38599.23
(1/781+((30-16.96)^2)/4044)*5301.613
sqrt(1/781+((30-16.96)^2)/4044)*5301.613
library(renderthis)
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
remotes::install_github('rstudio/chromote')
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
xaringan::inf_mr()
runApp('Scaling_variables')
xaringan::inf_mr()
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
shiny::runApp('Guess_the_line')
runApp('Guess_the_line')
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
xaringan::inf_mr()
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
remotes::install_github('rstudio/chromote')
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
xaringan::inf_mr()
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
3040/19
160/6000
sqrt(0.02666667)
0.4/0.1633
(60-32.5)^2
(60-32.5)^2/6000
1/21+0.1260417+!
1/21+0.1260417+1
1/21+0.1260417+1
sqrt(1.173661)*12.649
xaringan::moon_reader
xaringan::moon_reader
xaringan::moon_reader()
xaringan::inf_mr()
xaringan::inf_mr()
0.6574*sqrt(328.8626)/sqrt(5.6319)
5.6319*13
0.6574^2
328.8626-328.8626*0.43
328.8626*13-328.8626*0.43*13
2436.872/12
sqrt(202.3/72.214)
1.6737*1.65+5.023
1.6737*1.96+5.023
