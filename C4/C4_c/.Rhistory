height = 500)
geom
qq_plot
data_df$Residuals
View(data_df)
data_df <- data_df[order(data_df$Residuals), ]
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
qq_plot <- ggplotly(qq_plot, tooltip = "y",
width = 400,   # Adjust the width according to your preference
height = 500)
qq_plot
xaringan::inf_mr()
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df <- data.frame(Residuals = scale(residuals))
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df <- data_df[order(data_df$Residuals), ]
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df$Index <- rank(data_df$Residuals)
data_df$Residuals
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df <- data_df[order(data_df$Residuals), ]
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
qq_plot <- ggplotly(qq_plot, tooltip = "y",
width = 400,   # Adjust the width according to your preference
height = 500)
xaringan::inf_mr()
warnings()
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
qq_plot <- ggplotly(qq_plot,
width = 400,   # Adjust the width according to your preference
height = 500)
qq_plot
qq_plot <- ggplotly(qq_plot, tooltip="y",
width = 400,   # Adjust the width according to your preference
height = 500)
ggplotly(qq_plot, tooltip="y",
width = 400,   # Adjust the width according to your preference
height = 500)
ggplotly(qq_plot, tooltip=y,
width = 400,   # Adjust the width according to your preference
height = 500)
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
ggplotly(qq_plot, tooltip=y,
width = 400,   # Adjust the width according to your preference
height = 500)
xaringan::inf_mr()
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
ggplotly(qq_plot, tooltip=y,
width = 400,   # Adjust the width according to your preference
height = 500)
ggplotly(qq_plot,
width = 400,   # Adjust the width according to your preference
height = 500)
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
qq_plot=ggplotly(qq_plot,
width = 400,   # Adjust the width according to your preference
height = 500)
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
qq_plot
xaringan::inf_mr()
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
qq_plot=ggplotly(qq_plot,
width = 400,   # Adjust the width according to your preference
height = 500)
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
qq_plot
qq_plot
xaringan::inf_mr()
set.seed(123)
# Generate a sample of 100 values from a normal distribution with mean 0 and standard deviation 1
sample_data <- rnorm(100, mean = 0, sd = 1)
# Create a histogram of the sample
hist(sample_data, main = "Histogram of Normal Distribution Sample", xlab = "Values", ylab = "Frequency")
# Calculate the Jarque-Bera statistic
library(moments)
install.packages(moments)
install.packages("moments")
# Create a histogram of the sample
hist(sample_data, main = "Histogram of Normal Distribution Sample", xlab = "Values", ylab = "Frequency")
# Calculate the Jarque-Bera statistic
library(moments)
jarque.bera.test(sample_data)
install.packages("tseries")
install.packages("tseries")
# Calculate the Jarque-Bera statistic
library(tseries)
jarque.bera.test(sample_data)
# Create a histogram using ggplot2
ggplot(data = data.frame(x = sample_data), aes(x = x)) +
geom_histogram(binwidth = 0.5) +
labs(title = "Histogram of Normal Distribution Sample",
x = "Values",
y = "Frequency")+
theme_xaringan()
# Calculate the Jarque-Bera statistic
library(tseries)
jarque.bera.test(sample_data)
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Significance, Test Statistic, and Confidence Intervals"),
sidebarLayout(
sidebarPanel(
sliderInput("alpha", "Significance Level:", min = 0.01, max = 0.10, value = 0.05, step = 0.01),
sliderInput("mean", "Sample Mean:", min = -3, max = 3, value = 0, step = 0.1),
sliderInput("sigma", "Sigma (Standard Deviation):", min = 1, max = 10, value = 3),
sliderInput("n", "Sample Size (n):", min = 10, max = 1000, value = 100, step = 10),
sliderInput("confidence", "Confidence Level:", min = 0.7, max = 0.99, value = 0.95, step = 0.01)
),
mainPanel(
plotOutput("plot1"),
plotOutput("plot2"),
plotOutput("plot3")
)
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
df <- data.frame(x = rnorm(1000))
p <- ggplot(df, aes(x = x)) + geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
geom_density(color = "blue") +
geom_vline(aes(xintercept = qnorm(input$alpha/2), color = "Rejection Region"), linetype = "dashed") +
geom_vline(aes(xintercept = -qnorm(input$alpha/2), color = "Rejection Region"), linetype = "dashed") +
geom_vline(aes(xintercept = input$mean, color = "Sample Mean"), linetype = "solid") +
labs(title = "Distribution of Test Statistic under Null", color = "") +
theme_minimal()
print(p)
})
output$plot2 <- renderPlot({
df <- data.frame(x = rnorm(1000, mean = input$mean, sd = input$sigma/sqrt(input$n)))
p <- ggplot(df, aes(x = x)) + geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
geom_density(color = "blue") +
geom_vline(aes(xintercept = qnorm(input$alpha/2)*input$sigma/sqrt(input$n) + input$mean, color = "Rejection Region"), linetype = "dashed") +
geom_vline(aes(xintercept = -qnorm(input$alpha/2)*input$sigma/sqrt(input$n) + input$mean, color = "Rejection Region"), linetype = "dashed") +
geom_vline(aes(xintercept = input$mean, color = "Sample Mean"), linetype = "solid") +
labs(title = "Distribution of Mean under Null", color = "") +
theme_minimal()
print(p)
})
output$plot3 <- renderPlot({
lower_bound <- input$mean - qnorm((1 + input$confidence)/2) * input$sigma/sqrt(input$n)
upper_bound <- input$mean + qnorm((1 + input$confidence)/2) * input$sigma/sqrt(input$n)
df <- data.frame(label = c("Lower Bound", "Upper Bound"), value = c(lower_bound, upper_bound))
p <- ggplot(df, aes(x = label, y = value)) +
geom_point() +
geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound)) +
labs(title = "Confidence Interval", y = "") +
theme_minimal()
print(p)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Significance, Test Statistic, and Confidence Intervals"),
sidebarLayout(
sidebarPanel(
sliderInput("alpha", "Significance Level:", min = 0.01, max = 0.10, value = 0.05, step = 0.01),
sliderInput("mean", "Sample Mean:", min = -3, max = 3, value = 0, step = 0.1),
sliderInput("sigma", "Sigma (Standard Deviation):", min = 1, max = 10, value = 3),
sliderInput("n", "Sample Size (n):", min = 10, max = 1000, value = 100, step = 10),
sliderInput("confidence", "Confidence Level:", min = 0.7, max = 0.99, value = 0.95, step = 0.01)
),
mainPanel(
plotOutput("plot1"),
plotOutput("plot2"),
plotOutput("plot3")
)
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
curve(dnorm(x), xlim = c(-3, 3), main = "Distribution of the Test Statistic under Null", yaxs = "i", xlab = "Test Statistic", ylab = "", lwd = 2, axes = F)
axis(1, at = c(-qnorm(input$alpha/2), 0, qnorm(input$alpha/2)), padj = 0.75, labels = c(expression(-z[alpha]), expression(0), expression(z[alpha])))
polygon(x = c(qnorm(input$alpha/2), seq(qnorm(input$alpha/2), 3, 0.01), 3),
y = c(0, dnorm(seq(qnorm(input$alpha/2), 3, 0.01)), 0), col = "steelblue", border = NA)
polygon(x = c(-qnorm(input$alpha/2), seq(-qnorm(input$alpha/2), -3, -0.01), -3),
y = c(0, dnorm(seq(-qnorm(input$alpha/2), -3, -0.01)), 0), col = "steelblue", border = NA)
abline(v = input$mean, col = "red", lwd = 2)
})
output$plot2 <- renderPlot({
mu <- input$mean
sigma <- input$sigma / sqrt(input$n)
curve(dnorm(x, mean = mu, sd = sigma), xlim = c(mu-3*sigma, mu+3*sigma), main = "Distribution of Mean under Null", yaxs = "i", xlab = "Mean", ylab = "", lwd = 2, axes = F)
z_alpha <- qnorm(input$alpha/2)
axis(1, at = c(mu - z_alpha*sigma, mu, mu + z_alpha*sigma), padj = 0.75, labels = c(expression(mu - z[alpha]*sigma), expression(mu), expression(mu + z[alpha]*sigma)))
abline(v = mu, col = "red", lwd = 2)
})
output$plot3 <- renderPlot({
lower_bound <- input$mean - qnorm((1 + input$confidence)/2) * input$sigma/sqrt(input$n)
upper_bound <- input$mean + qnorm((1 + input$confidence)/2) * input$sigma/sqrt(input$n)
plot(1, xlim = c(lower_bound-1, upper_bound+1), ylim = c(0, 1), type = "n", axes = F, ann = F)
segments(lower_bound, 0.5, upper_bound, 0.5, lwd = 2)
points(c(lower_bound, upper_bound), rep(0.5, 2), pch = 19, cex = 1.5)
text((lower_bound + upper_bound) / 2, 0.65, labels = paste("Confidence Interval: [", round(lower_bound, 2), ",", round(upper_bound, 2), "]", sep = ""), cex = 1.2)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Significance, Test Statistic, and Confidence Intervals"),
sidebarLayout(
sidebarPanel(
sliderInput("alpha", "Significance Level:", min = 0.01, max = 0.10, value = 0.05, step = 0.01),
sliderInput("mean", "Sample Mean:", min = 5, max = 9, value = 7, step = 0.1),
sliderInput("sigma", "Sigma (Standard Deviation):", min = 1, max = 10, value = 3),
sliderInput("n", "Sample Size (n):", min = 10, max = 1000, value = 100, step = 10),
sliderInput("confidence", "Confidence Level:", min = 0.7, max = 0.99, value = 0.95, step = 0.01)
),
mainPanel(
plotOutput("plot1", height = "300px"),
plotOutput("plot2", height = "300px"),
plotOutput("plot3", height = "300px")
)
)
)
server <- function(input, output) {
mu_null <- 7
output$plot1 <- renderPlot({
curve(dnorm(x), xlim = c(5, 9), ylim = c(0, 0.45), main = "Distribution of the Test Statistic under Null", yaxs = "i", xlab = "Test Statistic", ylab = "", lwd = 2, axes = F)
z_alpha_2 <- qnorm(1 - input$alpha/2)
axis(1, at = c(mu_null - z_alpha_2, mu_null, mu_null + z_alpha_2), padj = 0.75, labels = c(expression(mu - z[alpha/2]), expression(mu), expression(mu + z[alpha/2])))
polygon(x = c(mu_null + z_alpha_2, seq(mu_null + z_alpha_2, 9, 0.01), 9),
y = c(0, dnorm(seq(mu_null + z_alpha_2, 9, 0.01)), 0), col = "steelblue", border = NA)
polygon(x = c(mu_null - z_alpha_2, seq(mu_null - z_alpha_2, 5, -0.01), 5),
y = c(0, dnorm(seq(mu_null - z_alpha_2, 5, -0.01)), 0), col = "steelblue", border = NA)
distance <- z_alpha_2
text(mu_null + distance/2, 0.2, labels = paste(expression(z[alpha/2] * sigma/sqrt(n) == ), round(distance, 2)), cex = 1.2)
server <- function(input, output) {
mu_null <- 7
output$plot1 <- renderPlot({
curve(dnorm(x), xlim = c(5, 9), ylim = c(0, 0.45), main = "Distribution of the Test Statistic under Null", yaxs = "i", xlab = "Test Statistic", ylab = "", lwd = 2, axes = F)
z_alpha_2 <- qnorm(1 - input$alpha/2)
axis(1, at = c(mu_null - z_alpha_2, mu_null, mu_null + z_alpha_2), padj = 0.75, labels = c(expression(mu - z[alpha/2]), expression(mu), expression(mu + z[alpha/2])))
polygon(x = c(mu_null + z_alpha_2, seq(mu_null + z_alpha_2, 9, 0.01), 9),
y = c(0, dnorm(seq(mu_null + z_alpha_2, 9, 0.01)), 0), col = "steelblue", border = NA)
polygon(x = c(mu_null - z_alpha_2, seq(mu_null - z_alpha_2, 5, -0.01), 5),
y = c(0, dnorm(seq(mu_null - z_alpha_2, 5, -0.01)), 0), col = "steelblue", border = NA)
distance <- z_alpha_2
text(mu_null + distance/2, 0.2, labels = paste(expression(z[alpha/2] * sigma/sqrt(n) == ), round(distance, 2)), cex = 1.2)
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Significance, Test Statistic, and Confidence Intervals"),
sidebarLayout(
sidebarPanel(
sliderInput("alpha", "Significance Level:", min = 0.01, max = 0.10, value = 0.05, step = 0.01),
sliderInput("mean", "Sample Mean:", min = 5, max = 9, value = 7, step = 0.1),
sliderInput("sigma", "Sigma (Standard Deviation):", min = 1, max = 10, value = 3),
sliderInput("n", "Sample Size (n):", min = 10, max = 1000, value = 100, step = 10),
sliderInput("confidence", "Confidence Level:", min = 0.7, max = 0.99, value = 0.95, step = 0.01)
),
mainPanel(
plotOutput("plot1", height = "300px"),
plotOutput("plot2", height = "300px"),
plotOutput("plot3", height = "300px")
)
)
)
server <- function(input, output) {
mu_null <- 7
output$plot1 <- renderPlot({
curve(dnorm(x), xlim = c(5, 9), ylim = c(0, 0.45), main = "Distribution of the Test Statistic under Null", yaxs = "i", xlab = "Test Statistic", ylab = "", lwd = 2, axes = F)
z_alpha_2 <- qnorm(1 - input$alpha/2)
axis(1, at = c(mu_null - z_alpha_2, mu_null, mu_null + z_alpha_2), padj = 0.75, labels = c(expression(mu - z[alpha/2]), expression(mu), expression(mu + z[alpha/2])))
polygon(x = c(mu_null + z_alpha_2, seq(mu_null + z_alpha_2, 9, 0.01), 9),
y = c(0, dnorm(seq(mu_null + z_alpha_2, 9, 0.01)), 0), col = "steelblue", border = NA)
polygon(x = c(mu_null - z_alpha_2, seq(mu_null - z_alpha_2, 5, -0.01), 5),
y = c(0, dnorm(seq(mu_null - z_alpha_2, 5, -0.01)), 0), col = "steelblue", border = NA)
distance <- z_alpha_2
text(mu_null + distance/2, 0.2, labels = paste(expression(z[alpha/2] * sigma/sqrt(n) == ), round(distance, 2)), cex = 1.2)
text(mu_null + distance/2, 0.2, labels = paste(expression(z[alpha/2] * sigma/sqrt(n) ), round(distance, 2)), cex = 1.2)
server <- function(input, output) {
mu_null <- 7
output$plot1 <- renderPlot({
curve(dnorm(x), xlim = c(5, 9), ylim = c(0, 0.45), main = "Distribution of the Test Statistic under Null", yaxs = "i", xlab = "Test Statistic", ylab = "", lwd = 2, axes = F)
z_alpha_2 <- qnorm(1 - input$alpha/2)
axis(1, at = c(mu_null - z_alpha_2, mu_null, mu_null + z_alpha_2), padj = 0.75, labels = c(expression(mu - z[alpha/2]), expression(mu), expression(mu + z[alpha/2])))
polygon(x = c(mu_null + z_alpha_2, seq(mu_null + z_alpha_2, 9, 0.01), 9),
y = c(0, dnorm(seq(mu_null + z_alpha_2, 9, 0.01)), 0), col = "steelblue", border = NA)
polygon(x = c(mu_null - z_alpha_2, seq(mu_null - z_alpha_2, 5, -0.01), 5),
y = c(0, dnorm(seq(mu_null - z_alpha_2, 5, -0.01)), 0), col = "steelblue", border = NA)
distance <- z_alpha_2
text(mu_null + distance/2, 0.2, labels = paste(expression(z[alpha/2] * sigma/sqrt(n) ), round(distance, 2)), cex = 1.2)
abline(v = input$mean, col = "red", lwd = 2)
title(main = "H0: mu = 7 vs Ha: mu != 7", line = 1, cex.main = 1.2)
})
output$plot2 <- renderPlot({
sigma <- input$sigma / sqrt(input$n)
curve(dnorm(x, mean = mu_null, sd = sigma), xlim = c(5, 9), ylim = c(0, 0.45), main = "Distribution of Mean under Null", yaxs = "i", xlab = "Mean", ylab = "", lwd = 2, axes = F)
z_alpha_2 <- qnorm(1 - input$alpha/2)
axis(1, at = c(mu_null, input$mean), labels = c(expression(mu), "Sample Mean"))
polygon(x = c(mu_null + z_alpha_2 * sigma, seq(mu_null + z_alpha_2 * sigma, 9, 0.01), 9),
y = c(0, dnorm(seq(mu_null + z_alpha_2 * sigma, 9, 0.01), mean = mu_null, sd = sigma), 0), col = "steelblue", border = NA)
polygon(x = c(mu_null - z_alpha_2 * sigma, seq(mu_null - z_alpha_2 * sigma, 5, -0.01), 5),
y = c(0, dnorm(seq(mu_null - z_alpha_2 * sigma, 5, -0.01), mean = mu_null, sd = sigma), 0), col = "steelblue", border = NA)
abline(v = input$mean, col = "red", lwd = 2)
})
output$plot3 <- renderPlot({
lower_bound <- input$mean - qnorm((1 + input$confidence)/2) * input$sigma/sqrt(input$n)
upper_bound <- input$mean + qnorm((1 + input$confidence)/2) * input$sigma/sqrt(input$n)
plot(1, xlim = c(5, 9), ylim = c(0, 1), type = "n", axes = F, ann = F)
segments(lower_bound, 0.5, upper_bound, 0.5, lwd = 2)
points(c(lower_bound, upper_bound), rep(0.5, 2), pch = 19, cex = 1.5)
distance_left <- input$mean - lower_bound
distance_right <- upper_bound - input$mean
text(input$mean - distance_left/2, 0.6, labels = paste(expression(z[alpha/2] * sigma/sqrt(n) ), round(distance_left, 2)), cex = 1.2)
text(input$mean + distance_right/2, 0.6, labels = paste(expression(z[alpha/2] * sigma/sqrt(n)), round(distance_right, 2)), cex = 1.2)
})
}
shinyApp(ui = ui, server = server)
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
library(shiny)
ui <- fluidPage(
titlePanel("Significance, Test Statistic, and Confidence Intervals"),
sidebarLayout(
sidebarPanel(
sliderInput("alpha", "Significance Level:", min = 0.01, max = 0.10, value = 0.05, step = 0.01),
sliderInput("mean", "Sample Mean:", min = 5, max = 9, value = 7, step = 0.1),
sliderInput("sigma", "Sigma (Standard Deviation):", min = 1, max = 10, value = 3),
sliderInput("n", "Sample Size (n):", min = 10, max = 1000, value = 100, step = 10),
sliderInput("confidence", "Confidence Level:", min = 0.7, max = 0.99, value = 0.95, step = 0.01)
),
mainPanel(
plotOutput("plot1", height = "300px"),
plotOutput("plot2", height = "300px"),
plotOutput("plot3", height = "200px")
)
)
)
server <- function(input, output) {
mu_null <- 7
output$plot1 <- renderPlot({
curve(dnorm(x), xlim = c(-4, 4), main = "Distribution of the Test Statistic under Null", yaxs = "i", xlab = "Test Statistic", ylab = "", lwd = 2, axes = F)
z_alpha_2 <- qnorm(1 - input$alpha/2)
axis(1, at = c(-z_alpha_2, 0, z_alpha_2), padj = 0.75, labels = c(expression(-z[alpha/2]), 0, expression(z[alpha/2])))
polygon(x = c(z_alpha_2, seq(z_alpha_2, 4, 0.01), 4),
y = c(0, dnorm(seq(z_alpha_2, 4, 0.01)), 0), col = "steelblue", border = NA)
polygon(x = c(-4, seq(-4, -z_alpha_2, 0.01), -z_alpha_2),
y = c(0, dnorm(seq(-4, -z_alpha_2, 0.01)), 0), col = "steelblue", border = NA)
test_statistic <- (input$mean - mu_null) / (input$sigma / sqrt(input$n))
abline(v = test_statistic, col = "red", lwd = 2)
text(test_statistic, 0.3, labels = round(test_statistic, 2), pos = 3)
title(main = "H0: mu = 7 vs Ha: mu != 7", line = 1, cex.main = 1.2)
})
output$plot2 <- renderPlot({
sigma <- input$sigma / sqrt(input$n)
curve(dnorm(x, mean = mu_null, sd = sigma), xlim = c(5, 9), main = "Distribution of Sample Mean under Null", yaxs = "i", xlab = "Sample Mean", ylab = "", lwd = 2, axes = F)
z_alpha_2 <- qnorm(1 - input$alpha/2)
axis(1, at = c(mu_null, input$mean), labels = c(expression(mu), "Sample Mean"))
polygon(x = c(mu_null + z_alpha_2 * sigma, seq(mu_null + z_alpha_2 * sigma, 9, 0.01), 9),
y = c(0, dnorm(seq(mu_null + z_alpha_2 * sigma, 9, 0.01), mean = mu_null, sd = sigma), 0), col = "steelblue", border = NA)
polygon(x = c(mu_null - z_alpha_2 * sigma, seq(mu_null - z_alpha_2 * sigma, 5, -0.01), 5),
y = c(0, dnorm(seq(mu_null - z_alpha_2 * sigma, 5, -0.01), mean = mu_null, sd = sigma), 0), col = "steelblue", border = NA)
abline(v = input$mean, col = "red", lwd = 2)
})
output$plot3 <- renderPlot({
lower_bound <- input$mean - qnorm((1 + input$confidence)/2) * input$sigma/sqrt(input$n)
upper_bound <- input$mean + qnorm((1 + input$confidence)/2) * input$sigma/sqrt(input$n)
plot(1, xlim = c(5, 9), ylim = c(0, 1), type = "n", axes = F, ann = F)
segments(lower_bound, 0.5, upper_bound, 0.5, lwd = 2)
points(c(lower_bound, upper_bound), rep(0.5, 2), pch = 19, cex = 1.5)
distance_left <- input$mean - lower_bound
distance_right <- upper_bound - input$mean
text(input$mean - distance_left/2, 0.6, labels = paste(expression(z[alpha/2] * sigma/sqrt(n) ), round(distance_left, 2)), cex = 1.2)
text(input$mean + distance_right/2, 0.6, labels = paste(expression(z[alpha/2] * sigma/sqrt(n)), round(distance_right, 2)), cex = 1.2)
})
}
shinyApp(ui = ui, server = server)
runApp('~/Hypothesis_Confidence')
?text
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
distance_left <- input$mean - lower_bound
?points
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
runApp('~/Hypothesis_Confidence')
