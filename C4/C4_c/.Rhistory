coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Theoretical Normal Quantile", y="Sample Quantile",title="Normal Quantile-Quantile Plot")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), color = "blue") +
labs(x = "Standardized Residuals", y=  title="Residuals Histogram") +
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), color = "blue") +
labs(x = "Standardized Residuals", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), color = "blue") +
labs(x = "Standardized Residuals", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Standardized Residuals",y="count", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Theoretical Normal Quantile", y="Sample Quantile",title="Normal Quantile-Quantile Plot")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Standardized Residuals",y="Count", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Theoretical Normal Quantile", y="Sample Quantile",title="Normal Quantile-Quantile Plot")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Residuos estandarizados",y="", title="Histograma de Residuos") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Cuantil normal te칩rico", y="Cuantil de muestra",title="Gr치fica cuantil-cuantil normal")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
library(gridExtra)
# Define the number of data points
num_data_points <- 100
# Generate uniform random residuals between -1 and 1
uniform_residuals <- rchisq(100, df = 10)
# Create independent variable (predictor)
x <- rnorm(num_data_points)
# Create dependent variable (response) with a linear relationship and added residuals
y <- -2 * x + 3 + uniform_residuals
# Create a data frame with predictor and response variables
data_df <- data.frame(x, y)
residuals=uniform_residuals
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Standardized Residuals",y="Count", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Theoretical Normal Quantile", y="Sample Quantile",title="Normal Quantile-Quantile Plot")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Residuos estandarizados",y="", title="Histograma de Residuos") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Cuantil normal te칩rico", y="Cuantil de muestra",title="Gr치fica cuantil-cuantil normal")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
library(gridExtra)
# Define the number of data points
num_data_points <- 100
# Generate uniform random residuals between -1 and 1
uniform_residuals <-rt(100, df = 5)
# Create independent variable (predictor)
x <- rnorm(num_data_points)
# Create dependent variable (response) with a linear relationship and added residuals
y <- -2 * x + 3 + uniform_residuals
# Create a data frame with predictor and response variables
data_df <- data.frame(x, y)
residuals=uniform_residuals
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Standardized Residuals",y="Count", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Theoretical Normal Quantile", y="Sample Quantile",title="Normal Quantile-Quantile Plot")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
library(gridExtra)
# Define the number of data points
num_data_points <- 100
# Generate uniform random residuals between -1 and 1
uniform_residuals <-rt(100, df = 2)
# Create independent variable (predictor)
x <- rnorm(num_data_points)
# Create dependent variable (response) with a linear relationship and added residuals
y <- -2 * x + 3 + uniform_residuals
# Create a data frame with predictor and response variables
data_df <- data.frame(x, y)
residuals=uniform_residuals
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Standardized Residuals",y="Count", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Theoretical Normal Quantile", y="Sample Quantile",title="Normal Quantile-Quantile Plot")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
library(gridExtra)
# Define the number of data points
num_data_points <- 100
# Generate uniform random residuals between -1 and 1
uniform_residuals <-rt(100, df = 2)
# Create independent variable (predictor)
x <- rnorm(num_data_points)
# Create dependent variable (response) with a linear relationship and added residuals
y <- -2 * x + 3 + uniform_residuals
# Create a data frame with predictor and response variables
data_df <- data.frame(x, y)
residuals=uniform_residuals
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Standardized Residuals",y="Count", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Theoretical Normal Quantile", y="Sample Quantile",title="Normal Quantile-Quantile Plot")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
library(gridExtra)
# Define the number of data points
num_data_points <- 100
# Generate uniform random residuals between -1 and 1
uniform_residuals <-rt(400, df = 2)
# Create independent variable (predictor)
x <- rnorm(num_data_points)
# Create dependent variable (response) with a linear relationship and added residuals
y <- -2 * x + 3 + uniform_residuals
# Create a data frame with predictor and response variables
data_df <- data.frame(x, y)
residuals=uniform_residuals
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Standardized Residuals",y="Count", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Theoretical Normal Quantile", y="Sample Quantile",title="Normal Quantile-Quantile Plot")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
library(gridExtra)
# Define the number of data points
num_data_points <- 100
# Generate uniform random residuals between -1 and 1
uniform_residuals <-rt(400, df = 2)
# Create independent variable (predictor)
x <- rnorm(num_data_points)
# Create dependent variable (response) with a linear relationship and added residuals
y <- -2 * x + 3 + uniform_residuals
# Create a data frame with predictor and response variables
data_df <- data.frame(x, y)
residuals=uniform_residuals
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Standardized Residuals",y="Count", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Theoretical Normal Quantile", y="Sample Quantile",title="Normal Quantile-Quantile Plot")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
library(gridExtra)
# Define the number of data points
num_data_points <- 100
# Generate uniform random residuals between -1 and 1
uniform_residuals <-rt(400, df = 2)
# Create independent variable (predictor)
x <- rnorm(num_data_points)
# Create dependent variable (response) with a linear relationship and added residuals
y <- -2 * x + 3 + uniform_residuals
# Create a data frame with predictor and response variables
data_df <- data.frame(x, y)
residuals=uniform_residuals
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Standardized Residuals",y="Count", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Theoretical Normal Quantile", y="Sample Quantile",title="Normal Quantile-Quantile Plot")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
library(gridExtra)
# Define the number of data points
num_data_points <- 100
# Generate uniform random residuals between -1 and 1
uniform_residuals <-rt(400, df = 2)
# Create independent variable (predictor)
x <- rnorm(num_data_points)
# Create dependent variable (response) with a linear relationship and added residuals
y <- -2 * x + 3 + uniform_residuals
# Create a data frame with predictor and response variables
data_df <- data.frame(x, y)
residuals=uniform_residuals
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Standardized Residuals",y="Count", title="Residuals Histogram") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Theoretical Normal Quantile", y="Sample Quantile",title="Normal Quantile-Quantile Plot")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, fill = "green", color = "black", alpha = 0.7) +
labs(x = "Residuos estandarizados",y="", title="Histograma de Residuos") +
theme_minimal()+
xlim(-3,3)
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)+
labs(x="Cuantil normal te칩rico", y="Cuantil de muestra",title="Gr치fica cuantil-cuantil normal")
# Arrange the three plots side by side
grid.arrange(histogram_plot, qq_plot, ncol = 2)
set.seed(123)
x <- seq(0.1, 5, length.out = 100)  # Avoid x = 0 for division
y <- 2 + 1 / x + rnorm(100, sd = 0.3)  # Relationship like 1/x
# Create a data frame
data <- data.frame(x, y)
# Fit a simple linear regression model in x
linear_model <- lm(y ~ x, data)
# Create a residuals vs. fitted values plot for the linear model
fitted_values_linear <- predict(linear_model, data)
residuals_linear <- residuals(linear_model)
gg2 <- ggplot(data.frame(Fitted = fitted_values_linear, Residuals = residuals_linear), aes(x = Fitted, y = Residuals)) +
geom_point(color = "black") +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_segment(aes(xend = Fitted, yend = 0, x = Fitted, y = Residuals), color = "blue", alpha = 0.2, linetype = "dashed") +
labs(x = "Fitted Values", y = "Residuals") +
theme_xaringan()
gg2 <- ggplot(data.frame(Fitted = fitted_values_linear, Residuals = residuals_linear), aes(x = Fitted, y = Residuals)) +
geom_point(color = "black") +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_segment(aes(xend = Fitted, yend = 0, x = Fitted, y = Residuals), color = "blue", alpha = 0.2, linetype = "dashed") +
labs(x = "Fitted Values", y = "Residuals") +
theme_minimal()
gg2
y <- 2 + 1 / x + rnorm(100, sd = x*0.3)  # Relationship like 1/x
set.seed(123)
x <- seq(0.1, 5, length.out = 100)  # Avoid x = 0 for division
y <- 2 + 1 / x + rnorm(100, sd = x*0.3)  # Relationship like 1/x
# Create a data frame
data <- data.frame(x, y)
# Fit a simple linear regression model in x
linear_model <- lm(y ~ x, data)
# Create a residuals vs. fitted values plot for the linear model
fitted_values_linear <- predict(linear_model, data)
residuals_linear <- residuals(linear_model)
gg2 <- ggplot(data.frame(Fitted = fitted_values_linear, Residuals = residuals_linear), aes(x = Fitted, y = Residuals)) +
geom_point(color = "black") +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_segment(aes(xend = Fitted, yend = 0, x = Fitted, y = Residuals), color = "blue", alpha = 0.2, linetype = "dashed") +
labs(x = "Fitted Values", y = "Residuals") +
theme_minimal()
gg2
set.seed(123)
x <- seq(0.1, 5, length.out = 100)  # Avoid x = 0 for division
y <- 2 + x+rnorm(100, sd = x*0.3)  # Relationship like 1/x
# Create a data frame
data <- data.frame(x, y)
# Fit a simple linear regression model in x
linear_model <- lm(y ~ x, data)
# Create a residuals vs. fitted values plot for the linear model
fitted_values_linear <- predict(linear_model, data)
residuals_linear <- residuals(linear_model)
gg2 <- ggplot(data.frame(Fitted = fitted_values_linear, Residuals = residuals_linear), aes(x = Fitted, y = Residuals)) +
geom_point(color = "black") +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_segment(aes(xend = Fitted, yend = 0, x = Fitted, y = Residuals), color = "blue", alpha = 0.2, linetype = "dashed") +
labs(x = "Fitted Values", y = "Residuals") +
theme_minimal()
gg2
gg2 <- ggplot(data.frame(Fitted = fitted_values_linear, Residuals = residuals_linear), aes(x = Fitted, y = Residuals)) +
geom_point(color = "black") +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_segment(aes(xend = Fitted, yend = 0, x = Fitted, y = Residuals), color = "blue", alpha = 0.2, linetype = "dashed") +
labs(x = "Fitted Values", y = "Residuals") +
theme_minimal(size=20)
gg2
gg2 <- ggplot(data.frame(Fitted = fitted_values_linear, Residuals = residuals_linear), aes(x = Fitted, y = Residuals)) +
geom_point(color = "black") +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
geom_segment(aes(xend = Fitted, yend = 0, x = Fitted, y = Residuals), color = "blue", alpha = 0.2, linetype = "dashed") +
labs(x = "Fitted Values", y = "Residuals") +
theme_minimal()+
theme(text = element_text(size = 20))
gg2
gg2 <- ggplot(data.frame(Fitted = fitted_values_linear, Residuals = residuals_linear), aes(x = Fitted, y = Residuals)) +
geom_point(color = "black") +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(x = "Fitted Values", y = "Residuals") +
theme_minimal()+
theme(text = element_text(size = 20))
gg2
gg2 <- ggplot(data.frame(Fitted = fitted_values_linear, Residuals = residuals_linear), aes(x = Fitted, y = Residuals)) +
geom_point(color = "black") +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(x = "y팩", y = "Residuals") +
theme_minimal()+
theme(text = element_text(size = 20))
gg2
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
shiny::runApp('C:/Users/Krzysztof Zaremba/Dropbox/Itam_teaching/Markdowns/C4/C4_a/ANOVA')
runApp('C:/Users/Krzysztof Zaremba/Dropbox/Itam_teaching/Markdowns/C4/C4_a/ANOVA')
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_a.html")
