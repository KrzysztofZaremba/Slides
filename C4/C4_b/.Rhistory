# Generate uniform random residuals between -1 and 1
uniform_residuals <- runif(num_data_points, min = -2, max = 2)
# Create independent variable (predictor)
x <- rnorm(num_data_points)
# Create dependent variable (response) with a linear relationship and added residuals
y <- -2 * x + 3 + uniform_residuals
# Create a data frame with predictor and response variables
data_df <- data.frame(x, y)
residuals=uniform_residuals
# Create a fitted regression plot
regression_plot <- ggplot(data_df, aes(x = x, y = y)) +
geom_point(color = "black") +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "X", y = "Y") +
theme_minimal()
# Create a histogram of standardized residuals
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, aes(y = after_stat(density)), fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(x = "Standardized Residuals", y = "Density") +
theme_minimal()
# Create a QQ plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)
# Arrange the three plots side by side
grid.arrange(regression_plot, histogram_plot, qq_plot, ncol = 3)
library(ggplot2)
library(gridExtra)
library(plotly)
# Set a seed for reproducibility
set.seed(123)
# Generate chi-square distributed residuals with 3 degrees of freedom
residuals <- rchisq(100, df = 3)
# Create a data frame with the residuals
data_df <- data.frame(Residuals = scale(residuals))
# Create a histogram plot with ggplot2
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, aes(y = after_stat(density)), fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(x = "Standardized Residuals", y = "Density") +
theme_minimal()
# Create a QQ plot with ggplot2
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)
# Combine both plots into a single ggplotly object
combined_plot <- plotly::subplot(
ggplotly(histogram_plot, tooltip = "y"),
ggplotly(qq_plot)
)
# Display the combined plot
combined_plot
library(plotly)
# Set a seed for reproducibility
set.seed(123)
# Generate chi-square distributed residuals with 3 degrees of freedom
residuals <- rchisq(100, df = 3)
# Create a data frame with the residuals
data_df <- data.frame(Residuals = scale(residuals))
# Create a histogram plot with ggplot2
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, aes(y = after_stat(density)), fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(x = "Standardized Residuals", y = "Density") +
theme_minimal()
# Create a QQ plot with ggplot2
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals, y = ..sample..)) +  # Use ..sample.. to display cumulative probability
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(0, 1)  # Set y-axis limits to show cumulative probability
# Convert both plots to plotly objects
histogram_plot <- ggplotly(histogram_plot, tooltip = "y")
qq_plot <- ggplotly(qq_plot, tooltip = "y")
# Display the combined plot with different scales
subplot(histogram_plot, qq_plot)
library(plotly)
# Set a seed for reproducibility
set.seed(123)
# Generate chi-square distributed residuals with 3 degrees of freedom
residuals <- rchisq(100, df = 3)
# Create a data frame with the residuals
data_df <- data.frame(Residuals = scale(residuals))
# Create a histogram plot with ggplot2
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, aes(y = after_stat(density)), fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(x = "Standardized Residuals", y = "Density") +
theme_minimal()
# Create a QQ plot with ggplot2
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals, y = ..sample..)) +  # Use ..sample.. to display cumulative probability
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
# Convert both plots to plotly objects
histogram_plot <- ggplotly(histogram_plot, tooltip = "y")
library(plotly)
# Set a seed for reproducibility
set.seed(123)
# Generate chi-square distributed residuals with 3 degrees of freedom
residuals <- rchisq(100, df = 3)
# Create a data frame with the residuals
data_df <- data.frame(Residuals = scale(residuals))
# Create a histogram plot with ggplot2
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, aes(y = after_stat(density)), fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(x = "Standardized Residuals", y = "Density") +
theme_minimal()
# Create a QQ plot with ggplot2
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals, y = ..sample..)) +  # Use ..sample.. to display cumulative probability
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
# Convert both plots to plotly objects
histogram_plot <- ggplotly(histogram_plot, tooltip = "y")
library(plotly)
# Set a seed for reproducibility
set.seed(123)
# Generate chi-square distributed residuals with 3 degrees of freedom
residuals <- rchisq(100, df = 3)
# Create a data frame with the residuals
data_df <- data.frame(Residuals = scale(residuals))
# Create a histogram plot with ggplot2
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, aes(y = after_stat(density)), fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(x = "Standardized Residuals", y = "Density") +
theme_minimal()
# Create a QQ plot with ggplot2
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals, y = ..sample..)) +  # Use ..sample.. to display cumulative probability
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3)
# Convert both plots to plotly objects
histogram_plot <- ggplotly(histogram_plot, tooltip = "y")
qq_plot <- ggplotly(qq_plot, tooltip = "y")
# Display the combined plot with different scales
subplot(histogram_plot, qq_plot)
library(plotly)
# Set a seed for reproducibility
set.seed(123)
# Generate chi-square distributed residuals with 3 degrees of freedom
residuals <- rchisq(100, df = 3)
# Create a data frame with the residuals
data_df <- data.frame(Residuals = scale(residuals))
# Create a histogram plot with ggplot2
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, aes(y = after_stat(density)), fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(x = "Standardized Residuals", y = "Density") +
theme_minimal()
# Create a QQ plot with ggplot2
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals, y = ..sample..)) +  # Use ..sample.. to display cumulative probability
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
# Convert both plots to plotly objects
histogram_plot <- ggplotly(histogram_plot, tooltip = "y")
qq_plot <- ggplotly(qq_plot, tooltip = "y")
# Display the combined plot with different scales
subplot(histogram_plot, qq_plot)
?subplot
ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, aes(y = after_stat(density)), fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(x = "Standardized Residuals", y = "Density") +
theme_minimal()+
ylim(0, 0.6)
library(plotly)
# Set a seed for reproducibility
set.seed(123)
# Generate chi-square distributed residuals with 3 degrees of freedom
residuals <- rchisq(100, df = 3)
# Create a data frame with the residuals
data_df <- data.frame(Residuals = scale(residuals))
# Create a histogram plot with ggplot2
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, aes(y = after_stat(density)), fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(x = "Standardized Residuals", y = "Density") +
theme_minimal()+
ylim(0, 0.6)  # A
# Create a QQ plot with ggplot2
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals, y = ..sample..)) +  # Use ..sample.. to display cumulative probability
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
# Convert both plots to plotly objects
histogram_plot <- ggplotly(histogram_plot, tooltip = "y")
qq_plot <- ggplotly(qq_plot, tooltip = "y")
# Display the combined plot with different scales
subplot(histogram_plot, qq_plot)
# Display the combined plot with different scales
combined_plot <- subplot(histogram_plot, qq_plot, nrows = 2, shareY = FALSE)
library(plotly)
# Set a seed for reproducibility
set.seed(123)
# Generate chi-square distributed residuals with 3 degrees of freedom
residuals <- rchisq(100, df = 3)
# Create a data frame with the residuals
data_df <- data.frame(Residuals = scale(residuals))
# Create a histogram plot with ggplot2
histogram_plot <- ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, aes(y = after_stat(density)), fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(x = "Standardized Residuals", y = "Density") +
theme_minimal()+
ylim(0, 0.6)  # A
# Create a QQ plot with ggplot2
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals, y = ..sample..)) +  # Use ..sample.. to display cumulative probability
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
# Convert both plots to plotly objects
histogram_plot <- ggplotly(histogram_plot, tooltip = "y")
qq_plot <- ggplotly(qq_plot, tooltip = "y")
# Display the combined plot with different scales
combined_plot <- subplot(histogram_plot, qq_plot, nrows = 2, shareY = FALSE)
combined_plot
combined_plot
# Display the combined plot with different scales
combined_plot <- subplot(histogram_plot, qq_plot, nrows = 2, shareX = FALSE, shareY = FALSE)
# Display the combined plot with different scales
combined_plot <- subplot(histogram_plot, qq_plot, nrows = 2, shareX = FALSE, shareY = FALSE)
xaringan::inf_mr()
ggplot(data_df, aes(x = scale(residuals))) +
geom_histogram(binwidth = 0.4, aes(y = after_stat(density)), fill = "green", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(x = "Standardized Residuals", y = "Density") +
theme_minimal()+
ylim(0, 0.6)
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals, text = sprintf("ECDF: %.2f", ecdf(Residuals)(Residuals)))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
qq_plot
ggplot(data_df) +
geom_qq(aes(sample = Residuals, text = sprintf("ECDF: %.2f", ecdf(Residuals)(Residuals)))) +
geom_abline(color = "red") +
coord_fixed()
ggplot(data_df) +
geom_qq(aes(sample = Residuals) +
geom_abline(color = "red") +
coord_fixed()
ggplot(data_df) +
ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed()
table <- data_df %>% mutate(text = ecdf(data_df$Residuals))
ecdf(data_df$Residuals)
qq_plot <- ggplotly(qq_plot, tooltip = "y",
width = 400,   # Adjust the width according to your preference
height = 500)
qq_plot
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
qq_plot <- ggplotly(qq_plot, tooltip = "y",
width = 400,   # Adjust the width according to your preference
height = 500)
qq_plot
qq_plot$x$data[[1]]$text <- table$text
qq_plot$x$data
qq_plot$x$data[[1]]
qq_plot$x$data[[1]]$text
qq_plot$x$data[[1]]$text <- data_df$Index
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
qq_plot$x$data[[1]]$text <- paste(Quantile:, data_df$Cumulative_Probability)
qq_plot <- ggplotly(qq_plot, tooltip = "y",
width = 400,   # Adjust the width according to your preference
height = 500)
geom
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
qq_plot <- ggplotly(qq_plot, tooltip = "y",
width = 400,   # Adjust the width according to your preference
height = 500)
geom
qq_plot
data_df$Residuals
View(data_df)
data_df <- data_df[order(data_df$Residuals), ]
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
qq_plot <- ggplotly(qq_plot, tooltip = "y",
width = 400,   # Adjust the width according to your preference
height = 500)
qq_plot
xaringan::inf_mr()
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df <- data.frame(Residuals = scale(residuals))
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df <- data_df[order(data_df$Residuals), ]
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df$Index <- rank(data_df$Residuals)
data_df$Residuals
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df <- data_df[order(data_df$Residuals), ]
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
qq_plot <- ggplotly(qq_plot, tooltip = "y",
width = 400,   # Adjust the width according to your preference
height = 500)
xaringan::inf_mr()
warnings()
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
qq_plot <- ggplotly(qq_plot,
width = 400,   # Adjust the width according to your preference
height = 500)
qq_plot
qq_plot <- ggplotly(qq_plot, tooltip="y",
width = 400,   # Adjust the width according to your preference
height = 500)
ggplotly(qq_plot, tooltip="y",
width = 400,   # Adjust the width according to your preference
height = 500)
ggplotly(qq_plot, tooltip=y,
width = 400,   # Adjust the width according to your preference
height = 500)
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
ggplotly(qq_plot, tooltip=y,
width = 400,   # Adjust the width according to your preference
height = 500)
xaringan::inf_mr()
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
ggplotly(qq_plot, tooltip=y,
width = 400,   # Adjust the width according to your preference
height = 500)
ggplotly(qq_plot,
width = 400,   # Adjust the width according to your preference
height = 500)
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
qq_plot=ggplotly(qq_plot,
width = 400,   # Adjust the width according to your preference
height = 500)
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
qq_plot
xaringan::inf_mr()
data_df <- data.frame(Residuals = scale(residuals))
qq_plot <- ggplot(data_df) +
geom_qq(aes(sample = Residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal() +
xlim(-3, 3) +
ylim(-3, 3)  # Set y-axis limits to show cumulative probability
qq_plot=ggplotly(qq_plot,
width = 400,   # Adjust the width according to your preference
height = 500)
data_df$Index <- rank(data_df$Residuals)
data_df$Cumulative_Probability <- round(data_df$Index / (nrow(data_df) + 1),3)
data_df <- data_df[order(data_df$Residuals), ]
qq_plot$x$data[[1]]$text <- paste("Quantile:", data_df$Cumulative_Probability)
qq_plot
qq_plot
xaringan::inf_mr()
set.seed(123)
# Generate a sample of 100 values from a normal distribution with mean 0 and standard deviation 1
sample_data <- rnorm(100, mean = 0, sd = 1)
# Create a histogram of the sample
hist(sample_data, main = "Histogram of Normal Distribution Sample", xlab = "Values", ylab = "Frequency")
# Calculate the Jarque-Bera statistic
library(moments)
install.packages(moments)
install.packages("moments")
# Create a histogram of the sample
hist(sample_data, main = "Histogram of Normal Distribution Sample", xlab = "Values", ylab = "Frequency")
# Calculate the Jarque-Bera statistic
library(moments)
jarque.bera.test(sample_data)
install.packages("tseries")
install.packages("tseries")
# Calculate the Jarque-Bera statistic
library(tseries)
jarque.bera.test(sample_data)
# Create a histogram using ggplot2
ggplot(data = data.frame(x = sample_data), aes(x = x)) +
geom_histogram(binwidth = 0.5) +
labs(title = "Histogram of Normal Distribution Sample",
x = "Values",
y = "Frequency")+
theme_xaringan()
# Calculate the Jarque-Bera statistic
library(tseries)
jarque.bera.test(sample_data)
library(renderthis)
remotes::install_github('rstudio/chromote')
to_pdf("C_4_slides_b.html")
to_pdf("C_4_slides_c.html")
to_pdf("C_4_slides_a.html")
