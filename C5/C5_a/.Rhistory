Nacimientos_2021$yhat=model4$fitted.values
## Better to use non-standarized model
Nacimientos_2021$yhat=model3$fitted.values
Nacimientos_2021$residuals=model3$residuals
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals))
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.05)
View(Nacimientos_2021)
### Do qq plot
model3=lm(PESO~EDADGESTACIONAL+I(EDADGESTACIONAL^2)+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
summary(model3)
###We have some non-linearity
model5=lm(PESO~EDADGESTACIONAL+I(EDADGESTACIONAL^2)+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
summary(model5)
Nacimientos_2021$yhat=model5$fitted.values
Nacimientos_2021$residuals=model5$residuals
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.7)
View(Nacimientos_2021)
model5=lm(PESO~EDADGESTACIONAL+I(EDADGESTACIONAL^2)+I(EDADGESTACIONAL^3)+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
summary(model5)
Nacimientos_2021$yhat=model5$fitted.values
Nacimientos_2021$residuals=model5$residuals
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.7)
qq_plot <- ggplot(Nacimientos_2021) +
geom_qq(aes(sample = residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)
ggplot(Nacimientos_2021) +
geom_qq(aes(sample = residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)
ggplot(Nacimientos_2021) +
geom_qq(aes(residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)
ggplot(Nacimientos_2021) +
geom_qq(aes(sample = residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)
ggplot(Nacimientos_2021) +
geom_qq(aes(sample = residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()+
xlim(-3,3)+
ylim(-3,3)
View(Nacimientos_2021)
### Do qq plot
ggplot(Nacimientos_2021) +
geom_qq(aes(sample = residuals)) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()
### Do qq plot
ggplot(Nacimientos_2021) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()
Nacimientos_2021 <- read.csv("C:/Users/kzysi/Dropbox/Birth_Mexico/Data/Nacimientos_2021.csv")
View(Nacimientos_2021)
Nacimientos_2021 = Nacimientos_2021[,c("PESO","EDADGESTACIONAL","EDAD","NUMEROEMBARAZOS","HIJOSNACIDOSMUERTOS",
"TOTALCONSULTAS")]
Nacimientos_2021 <- Nacimientos_2021[complete.cases(Nacimientos_2021), ]
Nacimientos_2021=Nacimientos_2021[sample(1:nrow(Nacimientos_2021),50000),]
Nacimientos_2021=Nacimientos_2021%>%
filter(PESO!=9999)%>%
filter(EDADGESTACIONAL!=99)%>%
filter(EDAD!=999)%>%
filter(TOTALCONSULTAS!=99)%>%
filter(NUMEROEMBARAZOS!=99)%>%
filter(HIJOSNACIDOSMUERTOS!=99)
#### Running regression with different set of predictors and comparing the models (R^2/adjusted R^2)
model1=lm(PESO~EDAD+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS, data=Nacimientos_2021)
summary(model1)
model2=lm(PESO~EDADGESTACIONAL+EDAD+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS, data=Nacimientos_2021)
summary(model2)
model2a=lm(PESO~EDADGESTACIONAL+EDAD+EDAD^2+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS, data=Nacimientos_2021)
summary(model2a)
model2a=lm(PESO~EDADGESTACIONAL+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS, data=Nacimientos_2021)
summary(model2a)
min(Nacimientos_2021$EDAD)
View(Nacimientos_2021)
View(Nacimientos_2021)
hist(Nacimientos_2021$EDAD)
hist(Nacimientos_2021$EDAD[Nacimientos_2021$EDAD!=999])
model3=lm(PESO~EDADGESTACIONAL+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
summary(model3)
#### Standardizing variables
model4=lm(scale(PESO)~scale(EDADGESTACIONAL)+scale(EDAD)+scale(I(EDAD^2))+scale(NUMEROEMBARAZOS)+scale(HIJOSNACIDOSMUERTOS)+scale(TOTALCONSULTAS), data=Nacimientos_2021)
summary(model4)
model4=lm(PESO~scale(EDADGESTACIONAL)+scale(EDAD)+scale(I(EDAD^2))+scale(NUMEROEMBARAZOS)+scale(HIJOSNACIDOSMUERTOS)+scale(TOTALCONSULTAS), data=Nacimientos_2021)
summary(model4)
### Plot residuals against predictions (it does not ma)
##if you use standarized model, than the predictions will be in terms of standard deviations and averages...
Nacimientos_2021$yhat=model4$fitted.values
View(Nacimientos_2021)
#### Standardizing variables
model4=lm(scale(PESO)~scale(EDADGESTACIONAL)+scale(EDAD)+scale(I(EDAD^2))+scale(NUMEROEMBARAZOS)+scale(HIJOSNACIDOSMUERTOS)+scale(TOTALCONSULTAS), data=Nacimientos_2021)
summary(model4)
### Plot residuals against predictions (it does not ma)
##if you use standarized model, than the predictions will be in terms of standard deviations and averages...
Nacimientos_2021$yhat=model4$fitted.values
## Better to use non-standarized model
Nacimientos_2021$yhat=model3$fitted.values
Nacimientos_2021$residuals=model3$residuals
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.7)
library(tidyverse)
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.7)
Nacimientos_2021=Nacimientos_2021%>%
filter(PESO!=9999)%>%
filter(EDADGESTACIONAL!=99)%>%
filter(EDAD!=999)%>%
filter(TOTALCONSULTAS!=99)%>%
filter(NUMEROEMBARAZOS!=99)%>%
filter(HIJOSNACIDOSMUERTOS!=99)
model3=lm(PESO~EDADGESTACIONAL+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
summary(model3)
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.7)
###We have some non-linearity
model5=lm(PESO~EDADGESTACIONAL+I(EDADGESTACIONAL^2)+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
## Better to use non-standarized model
Nacimientos_2021$yhat=model3$fitted.values
Nacimientos_2021$residuals=model3$residuals
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.7)
####
model3=lm(PESO~EDADGESTACIONAL+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS+I(NUMEROEMBARAZOS^2), data=Nacimientos_2021)
summary(model3)
Nacimientos_2021$yhat=model3$fitted.values
Nacimientos_2021$residuals=model3$residuals
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.7)
model5=lm(PESO~EDADGESTACIONAL+log(EDADGESTACIONAL)+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
summary(model5)
Nacimientos_2021$yhat=model5$fitted.values
Nacimientos_2021$residuals=model5$residuals
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.7)
###We have some non-linearity
model5=lm(PESO~EDADGESTACIONAL+I(EDADGESTACIONAL^2)+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
summary(model5)
Nacimientos_2021$yhat=model5$fitted.values
Nacimientos_2021$residuals=model5$residuals
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.7)
model5=lm(PESO~EDADGESTACIONAL+I(EDADGESTACIONAL^2)+I(EDADGESTACIONAL^3)+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
summary(model5)
Nacimientos_2021$yhat=model5$fitted.values
Nacimientos_2021$residuals=model5$residuals
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.7)
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=EDADGESTACIONAL , y=PESO), alpha=0.7)
ggplot(data=Nacimientos_2021)+
geom_point(aes(x=yhat, y=residuals), alpha=0.7)
### Do qq plot
ggplot(Nacimientos_2021) +
geom_qq(aes(sample = scale(residuals))) +
geom_abline(color = "red") +
coord_fixed() +
theme_minimal()
View(Nacimientos_2021)
model5=lm(PESO~-1+EDADGESTACIONAL+I(EDADGESTACIONAL^2)+I(EDADGESTACIONAL^3)+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
summary(model5)
model5=lm(PESO~EDADGESTACIONAL+I(EDADGESTACIONAL^2)+I(EDADGESTACIONAL^3)+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
summary(model5)
model5=lm(PESO~-1+EDADGESTACIONAL+I(EDADGESTACIONAL^2)+I(EDADGESTACIONAL^3)+EDAD+I(EDAD^2)+NUMEROEMBARAZOS+HIJOSNACIDOSMUERTOS+TOTALCONSULTAS, data=Nacimientos_2021)
summary(model5)
xaringan::inf_mr()
xaringan::inf_mr()
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(forecast)
library(plotly)
library(dplyr)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(car)
library(kableExtra)
library(DT)
set.seed(123) # for reproducibility
data <- data.frame(
tiktok_ad_spend = runif(100, 50, 500), # random ad spending between $50 and $500
young = sample(0:1, 100, replace = TRUE) # randomly assign age groups
)
# Generate sales based on the model with interaction
beta_0 <- 20
beta_1 <- 0.1
beta_2 <- 15
beta_3 <- 0.7
data$sales <- with(data, beta_0 + beta_1 * tiktok_ad_spend + beta_2 * young + beta_3 * tiktok_ad_spend * young + rnorm(0, sd = 20))
beta_0 <- 20
beta_1 <- 0.1
beta_2 <- 15
beta_3 <- 0.7
data$sales <- with(data, beta_0 + beta_1 * tiktok_ad_spend + beta_2 * young + beta_3 * tiktok_ad_spend * young + rnorm(100, sd = 20))
# Load the ggplot2 library
library(ggplot2)
library(plotly)
# Create a scatter plot with regression line
ggplot(data, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", formula = sales ~ tiktok_ad_spend, se = FALSE, color = "blue") +
theme_xaringan()
ggplot(data, aes(x = tiktok_ad_spend, y = sales, color=young)) +
geom_point() +
geom_smooth(data=data,method = "lm", formula = sales ~ tiktok_ad_spend, color = "black") +
theme_xaringan()
data$young=as.character(data$young)
warnings()
ggplot(data, aes(x = tiktok_ad_spend, y = sales, color=young)) +
geom_point() +
geom_smooth(data=data,method = "lm", formula = sales ~ tiktok_ad_spend, color = "black")
ggplot(data, aes(x = tiktok_ad_spend, y = sales, color=young)) +
geom_smooth(data=data,method = "lm", formula = sales ~ tiktok_ad_spend, color = "black")
View(data)
ggplot(data, aes(x = tiktok_ad_spend, y = sales, color=young)) +
geom_smooth(method = "lm", formula = data$sales ~ data$tiktok_ad_spend, color = "black")
View(data)
View(data)
datas=data
ggplot(datas, aes(x = tiktok_ad_spend, y = sales, color=young)) +
geom_smooth(method = "lm", formula = datas$sales ~ datas$tiktok_ad_spend, color = "black")
ggplot() +
geom_smooth(method = "lm", formula = datas$sales ~ datas$tiktok_ad_spend, color = "black")
ggplot(datas, aes(x = tiktok_ad_spend, y = sales)) +
geom_smooth(method = "lm", formula = datas$sales ~ datas$tiktok_ad_spend, color = "black")
View(data)
data$predicted_sales <- predict(model, newdata = data)
# Create a scatter plot with regression line
ggplot(data, aes(x = tiktok_ad_spend, y = sales, color=young)) +
geom_point() +
geom_line(aes(y = predicted_sales), size = 1) +
theme_xaringan()
# Create a scatter plot with regression line
ggplot() +
geom_point(data, aes(x = tiktok_ad_spend, y = sales, color=young)) +
geom_line(data=data, aes(x = tiktok_ad_spend, y = predicted_sales), size = 1) +
theme_xaringan()
# Create a scatter plot with regression line
ggplot(data, aes(x = tiktok_ad_spend, y = sales) ) +
geom_point(aes(color=young)) +
geom_line(data=data, aes(x = tiktok_ad_spend, y = predicted_sales), size = 1) +
theme_xaringan()
ggplot(data, aes(x = tiktok_ad_spend, y = sales) ) +
geom_point(aes(color=young))
# Create a scatter plot with regression line
ggplot(data, aes(x = tiktok_ad_spend, y = sales) ) +
geom_point(aes(color=young)) +
geom_line(aes(x = tiktok_ad_spend, y = predicted_sales), size = 1) +
theme_xaringan()
ggplot(data, aes(x = tiktok_ad_spend, y = sales) ) +
geom_point(aes(color=young))
ggplot(data, aes(x = tiktok_ad_spend, y = sales) ) +
geom_point(aes(color=young)) +
geom_line(aes(y = predicted_sales), size = 1)
ggplot(data, aes(x = tiktok_ad_spend, y = sales) ) +
geom_point(aes(color=young))
model <- lm(sales ~ tiktok_ad_spend +young, data = data)
data$predicted_sales <- predict(model, newdata = data)
# Create a scatter plot with regression line
ggplot(data, aes(x = tiktok_ad_spend, y = sales) ) +
geom_line(aes(y = predicted_sales), size = 1) +
geom_point(aes(color=young)) +
theme_xaringan()
predicted_sale
ggplot(data, aes(x = tiktok_ad_spend, y = sales) ) +
geom_line(aes(y = predicted_sales), size = 1)
model <- lm(sales ~ tiktok_ad_spend +young, data = data)
data$predicted_sales <- predict(model, newdata = data)
# Create a scatter plot with regression line
ggplot(data, aes(x = tiktok_ad_spend, y = sales, color=young) ) +
geom_line(aes(y = predicted_sales), size = 1) +
geom_point() +
theme_xaringan()
ggplot(data, aes(x = tiktok_ad_spend, y = sales, color=young) ) +
geom_line(aes(y = predicted_sales), size = 1) +
geom_point() +
theme_xaringan()
xaringan::inf_mr()
0.222+0.706
lm_model <- lm(Duration ~ Occupancy+EDAD, data = Sample_urg)
new_data<- data.frame(Occupancy= c(10), EDAD=52)
predict(lm_model, newdata = new_data, interval = "confidence", level = 0.95, se.fit=TRUE)
X <- model.matrix(model)
XTX <- t(X) %*% X
# Calculate (X'X)^-1
XTX_inv <- solve(XTX)
XTX_inv
lm_model <- lm(Duration ~ Occupancy+EDAD, data = Sample_urg)
X <- model.matrix(lm_model)
XTX <- t(X) %*% X
# Calculate (X'X)^-1
XTX_inv <- solve(XTX)
XTX_inv
xaringan::inf_mr()
View(z_matrix)
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_5_slides_a.html")
xaringan::inf_mr()
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_5_slides_a.html")
xaringan::inf_mr()
0.00164/0.0686
0.00164/0.02389
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_5_slides_a.html")
xaringan::inf_mr()
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_5_slides_a.html")
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_5_slides_a.html")
xaringan::moon_reader
xaringan::moon_reader()
xaringan::inf_mr()
3+5*50+9*20
2*1+7*50+1*20
431+50*372+60*20
1640/2
1260.25+1640.25
(1260.25+1640.25)/2
1450.25/39
0.873-1
sqrt(0.0735)
-0.127/0.2711
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_6_slides_a.html")
xaringan::inf_mr()
xaringan::inf_mr()
install.packages("Lock5Data")
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(forecast)
library(plotly)
library(dplyr)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(car)
library(kableExtra)
library(DT)
library(Lock5Data)
# Fit a linear regression model
lm_model <- lm(Price ~ Size+Beds+Baths, data = HomesForSale)
# Display the summary of the linear regression model
summary(lm_model)
library(AER)
install.packages("AER")
library(AER)
# Fit a linear regression model
lm_model <- lm(price ~ bedrooms+bathrooms+lotsize, data = HousePrices)
# Fit a linear regression model
lm_model <- lm(price ~ bedrooms+bathrooms+lotsize, data = HousePrices)
install.packages("wooldridge")
knitr::opts_chunk$set(echo = TRUE,dpi=300)
library(shiny)
library(ggplot2)
library(forecast)
library(plotly)
library(dplyr)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(hrbrthemes)
library(gridExtra)
library(cowplot)
library(viridis)
library(gapminder)
library(knitr)
library(car)
library(kableExtra)
library(DT)
library(Lock5Data)
library(wooldridge)
# Fit a linear regression model
lm_model <- lm(wage ~ exper+looks+female+married+educ, data = beauty)
# Display the summary of the linear regression model
summary(lm_model)
# Fit a linear regression model
lm_model <- lm(price ~ rooms+baths+age+land, data = hprice3)
# Display the summary of the linear regression model
summary(lm_model)
SpeedDating
speeddating_long <- speeddating %>%
pivot_longer(
cols = ends_with("M") | ends_with("F"),
names_to = c(".value", "gender"),
names_pattern = "(.*)([MF])"
) %>%
mutate(
gender = recode(gender, "M" = "male", "F" = "female")
)
library(tidyverse)
speeddating_long <- speeddating %>%
pivot_longer(
cols = ends_with("M") | ends_with("F"),
names_to = c(".value", "gender"),
names_pattern = "(.*)([MF])"
) %>%
mutate(
gender = recode(gender, "M" = "male", "F" = "female")
)
SpeedDating2 <- SpeedDating %>%
pivot_longer(
cols = ends_with("M") | ends_with("F"),
names_to = c(".value", "gender"),
names_pattern = "(.*)([MF])"
) %>%
mutate(
gender = recode(gender, "M" = "male", "F" = "female")
)
SpeedDating2 <- SpeedDating %>%
pivot_longer(
cols = ends_with("M") | ends_with("F"),
names_to = c(".value", "gender"),
names_pattern = "(.*)([MF])"
)
SpeedDating2 <- SpeedDating %>%
pivot_longer(
cols = ends_with("M") | ends_with("F"),
names_to = c(".value", "gender"),
names_pattern = "(.*)([MF])"
) %>%
mutate(
gender = recode(as.character(gender), "M" = "male", "F" = "female")
)
SpeedDating2 <- SpeedDating %>%
pivot_longer(
cols = ends_with("M") | ends_with("F"),
names_to = c(".value", "gender"),
names_pattern = "(.*)([MF])"
)
lm_model <- lm(Like ~ Attractive+Intelligent+Fun+Ambitious+SharedInterests, data = SpeedDating2)
# Fit a linear regression model
lm_model <- lm(Like ~ Attractive+Intelligent+Fun+Ambitious+Shared_Interests, data = SpeedDating2)
lm_model <- lm(Like ~ Attractive+Intelligent+Fun+Ambitious+SharedInterests, data = SpeedDating2)
summary(lm_model)
# Fit a linear regression model
lm_model <- lm(Like ~ Attractive*Gender, data = SpeedDating2)
# Fit a linear regression model
lm_model <- lm(Like ~ Attractive*gender, data = SpeedDating2)
# Display the summary of the linear regression model
summary(lm_model)
library(renderthis)
install.packages("renderthis")
remotes::install_github("jhelvy/renderthis")
install.packages("remotes")
remotes::install_github("jhelvy/renderthis")
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_5_slides_a.html")
#remotes::install_github('rstudio/chromote')
to_pdf("C_5_slides_a.html")
#remotes::install_github('rstudio/chromote')
to_pdf("C_5_slides_a.html")
remotes::install_github('rstudio/chromote')
to_pdf("C_5_slides_a.html")
