geom_point(alpha = 0.6, shape = 21, color = "#d95f0e", fill = "white", size = 3) + # Points
theme_minimal() +
labs(
title = "Daily Bus Ridership in NYC",
subtitle = "Trends in passenger numbers over time",
x = "Date",
y = "Number of Passengers"
) +
theme(
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 14),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.position = "none"
)
ggplot(data = m, aes(x = Date, y = Bus_ridership)) +
geom_point(alpha = 0.6, shape = 21, color = "#d95f0e", fill = "white", size = 3) + # Points
theme_minimal() +
labs(
title = "Daily Bus Ridership in NYC",
subtitle = "Trends in passenger numbers over time",
x = "Date",
y = "Number of Passengers"
) +
theme(
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 14),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.position = "none"
)+ylim(0,NA)
ggplot(data = m, aes(x = Date, y = Bus_ridership)) +
geom_point(alpha = 0.6, shape = 21, color = "#d95f0e", fill = "blue", size = 3) + # Points
theme_minimal() +
labs(
title = "Daily Bus Ridership in NYC",
subtitle = "Trends in passenger numbers over time",
x = "Date",
y = "Number of Passengers"
) +
theme(
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 14),
axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.position = "none"
)+ylim(0,NA)
data <- data.frame(
Group = c("Group 1", "Group 2", "Group 3", "Group 4", "Group 5", "Group 6"),
Prediction = c(1403556, 1392246, 1440286, 1326506, 1083278, 1386326),
Lower_95 = c(1384299, 1223949, 1415528, 1108415, 864703.2, 1367545),
Upper_95 = c(1422813, 1560543, 1465044, 1544596, 1301852, 1405107)
)
# Actual value
actual_value <- 1340570
# Create the plot
p <- ggplot(data, aes(x = Group)) +
# Add 95% CI
geom_errorbar(aes(ymin = Lower_95, ymax = Upper_95), width = 0.4, color = "red", alpha = 0.6) +
# Add predictions as points
geom_point(aes(y = Prediction), size = 3, color = "black") +
# Add the actual value as a horizontal line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1) +
# Flip axes
coord_flip() +
# Customize labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions and their intervals",
x = "Groups",
y = "Predictions and Confidence Intervals"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text = element_text(size = 12)
)
# Display the plot
print(p)
# Create the plot
p <- ggplot(data, aes(x = Group)) +
# Add 95% CI
geom_errorbar(aes(ymin = Lower_95, ymax = Upper_95), width = 0.4, color = "red", alpha = 0.6) +
# Add predictions as points
geom_point(aes(y = Prediction), size = 3, color = "black") +
# Add the actual value as a horizontal line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1) +
# Flip axes
coord_flip() +
# Customize labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions and their intervals",
x = "Groups",
y = "Predictions and Confidence Intervals"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text = element_text(size = 12)
)+ylim(0,NA)
# Display the plot
print(p)
# Create the plot
p <- ggplot(data, aes(x = Group)) +
# Add 95% CI
geom_errorbar(aes(ymin = Lower_95, ymax = Upper_95), width = 0.4, color = "red", alpha = 0.6) +
# Add predictions as points
geom_point(aes(y = Prediction), size = 3, color = "black") +
# Add the actual value as a horizontal line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1) +
# Flip axes
ylim(0,NA)+
coord_flip() +
# Customize labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions and their intervals",
x = "Groups",
y = "Predictions and Confidence Intervals"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text = element_text(size = 12)
)
# Display the plot
print(p)
data <- data.frame(
Group = c("Group 1", "Group 2", "Group 3", "Group 4", "Group 5", "Group 6"),
Prediction = c(1403556, 1392246, 1440286, 1326506, 1083278, 1386326),
Lower_95 = c(1384299, 1223949, 1415528, 1108415, 864703.2, 1367545),
Upper_95 = c(1422813, 1560543, 1465044, 1544596, 1301852, 1405107)
)
# Actual value
actual_value <- 1340570
# Create the plot
p <- ggplot(data, aes(x = Group)) +
# Add 95% CI
geom_errorbar(aes(ymin = Lower_95, ymax = Upper_95), width = 0.4, color = "red", alpha = 0.6) +
# Add predictions as points
geom_point(aes(y = Prediction), size = 3, color = "black") +
# Add the actual value as a horizontal line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1) +
# Flip axes
ylim(0,NA)+
coord_flip() +
# Customize labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions and their intervals",
x = "Groups",
y = "Predictions and Confidence Intervals"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text = element_text(size = 12)
)
# Display the plot
print(p)
# Create the plot
p <- ggplot(data, aes(x = reorder(Group, -Prediction))) + # Reorder groups by prediction
# Add 95% CI with thicker and gradient bars
geom_errorbar(aes(ymin = Lower_95, ymax = Upper_95),
width = 0.6, color = "blue", size = 1, alpha = 0.8) +
# Add prediction points with a larger size and gradient color
geom_point(aes(y = Prediction), size = 4, shape = 21, fill = "#FF5733", color = "black") +
# Add the actual value as a bold dashed line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1.2) +
# Flip axes for horizontal comparison
coord_flip() +
# Customize axis limits
scale_y_continuous(labels = scales::comma, expand = expansion(mult = c(0.02, 0.1))) +
# Add labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions with actual value as reference",
x = "Groups",
y = "Number of Passengers"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.grid.major = element_line(color = "gray85"),
panel.grid.minor = element_blank()
)
# Display the plot
print(p)
data <- data.frame(
Group = c("Group 1", "Group 2", "Group 3", "Group 4", "Group 5", "Group 6"),
Prediction = c(1403556, 1392246, 1440286, 1326506, 1083278, 1386326),
Lower_95 = c(1384299, 1223949, 1415528, 1108415, 864703.2, 1367545),
Upper_95 = c(1422813, 1560543, 1465044, 1544596, 1301852, 1405107)
)
# Actual value
actual_value <- 1340570
# Create the plot
p <- ggplot(data, aes(x = reorder(Group, -Prediction))) + # Reorder groups by prediction
# Add 95% CI with thicker and gradient bars
geom_errorbar(aes(ymin = Lower_95, ymax = Upper_95),
width = 0.6, color = "blue", size = 1, alpha = 0.8) +
# Add prediction points with a larger size and gradient color
geom_point(aes(y = Prediction), size = 4, shape = 21, fill = "#FF5733", color = "black") +
# Add the actual value as a bold dashed line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1.2) +
# Flip axes for horizontal comparison
coord_flip() +
# Customize axis limits
scale_y_continuous(labels = scales::comma, expand = expansion(mult = c(0.02, 0.1))) +
# Add labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions with actual value as reference",
x = "Groups",
y = "Number of Passengers"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.grid.major = element_line(color = "gray85"),
panel.grid.minor = element_blank()
)
# Display the plot
print(p)
# Create the plot
p <- ggplot(data, aes(x = reorder(Group, -Prediction))) + # Reorder groups by prediction
# Add 95% CI with thicker and gradient bars
geom_errorbar(aes(ymin = Lower_95, ymax = Upper_95),
width = 0.6, color = "blue", size = 1, alpha = 0.8) +
# Add prediction points with a larger size and gradient color
geom_point(aes(y = Prediction), size = 4, shape = 21, fill = "#FF5733", color = "black") +
# Add the actual value as a bold dashed line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1.2) +
# Flip axes for horizontal comparison
coord_flip() +
# Customize axis limits
scale_y_continuous(labels = scales::comma, expand = expansion(mult = c(0.02, 0.1))) +
# Add labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions with actual value as reference",
x = "Groups",
y = "Number of Passengers"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.grid.major = element_line(color = "gray85"),
panel.grid.minor = element_blank()
)+ylim(0,NA)
# Display the plot
print(p)
# Create the plot
p <- ggplot(data, aes(x = reorder(Group, -Prediction))) + # Reorder groups by prediction
# Add 95% CI with thicker and gradient bars
# Add prediction points with a larger size and gradient color
geom_point(aes(y = Prediction), size = 4, shape = 21, fill = "#FF5733", color = "black") +
# Add the actual value as a bold dashed line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1.2) +
# Flip axes for horizontal comparison
coord_flip() +
# Customize axis limits
scale_y_continuous(labels = scales::comma, expand = expansion(mult = c(0.02, 0.1))) +
# Add labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions with actual value as reference",
x = "Groups",
y = "Number of Passengers"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.grid.major = element_line(color = "gray85"),
panel.grid.minor = element_blank()
)+ylim(0,NA)
# Display the plot
print(p)
# Create the plot
p <- ggplot(data, aes(x = Group)) + # Reorder groups by prediction
# Add 95% CI with thicker and gradient bars
# Add prediction points with a larger size and gradient color
geom_point(aes(y = Prediction), size = 4, shape = 21, fill = "#FF5733", color = "black") +
# Add the actual value as a bold dashed line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1.2) +
# Flip axes for horizontal comparison
coord_flip() +
# Customize axis limits
scale_y_continuous(labels = scales::comma, expand = expansion(mult = c(0.02, 0.1))) +
# Add labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions with actual value as reference",
x = "Groups",
y = "Number of Passengers"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.grid.major = element_line(color = "gray85"),
panel.grid.minor = element_blank()
)+ylim(0,NA)
# Display the plot
print(p)
data <- data.frame(
Group = c("Group 1", "Group 2", "Group 3", "Group 4", "Group 5", "Group 6"),
Prediction = c(1403556, 1392246, 1440286, 1326506, 1083278, 1386326),
Lower_95 = c(1384299, 1223949, 1415528, 1108415, 864703.2, 1367545),
Upper_95 = c(1422813, 1560543, 1465044, 1544596, 1301852, 1405107)
)
# Actual value
actual_value <- 1340570
# Create the plot
p <- ggplot(data, aes(x = reorder(Group, -Prediction))) +
# Add shaded area for 5% off
geom_rect(
aes(xmin = -Inf, xmax = Inf, ymin = lower_5_percent, ymax = upper_5_percent),
fill = "lightblue", alpha = 0.2
) +
# Add shaded area for 2% off
geom_rect(
aes(xmin = -Inf, xmax = Inf, ymin = lower_2_percent, ymax = upper_2_percent),
fill = "lightgreen", alpha = 0.3
) +
# Add 95% CI
geom_errorbar(aes(ymin = Lower_95, ymax = Upper_95),
width = 0.4, color = "blue", size = 1, alpha = 0.8) +
# Add prediction points
geom_point(aes(y = Prediction), size = 4, shape = 21, fill = "#FF5733", color = "black") +
# Add the actual value as a bold dashed line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1.2) +
# Flip axes for horizontal comparison
coord_flip() +
# Customize axis limits
scale_y_continuous(labels = comma, expand = expansion(mult = c(0.02, 0.1)), limits = c(0, NA)) +
# Add labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions with actual value as reference\nShaded areas: 2% (green) and 5% (blue) off actual value",
x = "Groups",
y = "Number of Passengers"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.grid.major = element_line(color = "gray85"),
panel.grid.minor = element_blank()
)
# Create the plot
p <- ggplot(data, aes(x = reorder(Group, -Prediction))) +
# Add shaded area for 5% off
geom_rect(
aes(xmin = -Inf, xmax = Inf, ymin = lower_5_percent, ymax = upper_5_percent),
fill = "lightblue", alpha = 0.2
) +
# Add shaded area for 2% off
geom_rect(
aes(xmin = -Inf, xmax = Inf, ymin = lower_2_percent, ymax = upper_2_percent),
fill = "lightgreen", alpha = 0.3
) +
# Add 95% CI
geom_errorbar(aes(ymin = Lower_95, ymax = Upper_95),
width = 0.4, color = "blue", size = 1, alpha = 0.8) +
# Add prediction points
geom_point(aes(y = Prediction), size = 4, shape = 21, fill = "#FF5733", color = "black") +
# Add the actual value as a bold dashed line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1.2) +
# Flip axes for horizontal comparison
coord_flip() +
# Customize axis limits
scale_y_continuous(expand = expansion(mult = c(0.02, 0.1)), limits = c(0, NA)) +
# Add labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions with actual value as reference\nShaded areas: 2% (green) and 5% (blue) off actual value",
x = "Groups",
y = "Number of Passengers"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.grid.major = element_line(color = "gray85"),
panel.grid.minor = element_blank()
)
# Display the plot
print(p)
upper_5_percent <- actual_value * 1.05
lower_2_percent <- actual_value * 0.98
actual_value <- 1340570
lower_2_percent <- actual_value * 0.98
upper_2_percent <- actual_value * 1.02
lower_5_percent <- actual_value * 0.95
upper_5_percent <- actual_value * 1.05
# Create the plot
p <- ggplot(data, aes(x = reorder(Group, -Prediction))) +
# Add shaded area for 5% off
geom_rect(
aes(xmin = -Inf, xmax = Inf, ymin = lower_5_percent, ymax = upper_5_percent),
fill = "lightblue", alpha = 0.2
) +
# Add shaded area for 2% off
geom_rect(
aes(xmin = -Inf, xmax = Inf, ymin = lower_2_percent, ymax = upper_2_percent),
fill = "lightgreen", alpha = 0.3
) +
# Add 95% CI
geom_errorbar(aes(ymin = Lower_95, ymax = Upper_95),
width = 0.4, color = "blue", size = 1, alpha = 0.8) +
# Add prediction points
geom_point(aes(y = Prediction), size = 4, shape = 21, fill = "#FF5733", color = "black") +
# Add the actual value as a bold dashed line
geom_hline(yintercept = actual_value, linetype = "dashed", color = "darkgreen", size = 1.2) +
# Flip axes for horizontal comparison
coord_flip() +
# Customize axis limits
scale_y_continuous(expand = expansion(mult = c(0.02, 0.1)), limits = c(0, NA)) +
# Add labels and themes
labs(
title = "Predictions with 95% Confidence Intervals",
subtitle = "Group-wise predictions with actual value as reference\nShaded areas: 2% (green) and 5% (blue) off actual value",
x = "Groups",
y = "Number of Passengers"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
panel.grid.major = element_line(color = "gray85"),
panel.grid.minor = element_blank()
)
# Display the plot
print(p)
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_1_slides.html")
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
library(shiny)
library(ggplot2)
library(forecast)
library(plotly)
library(dplyr)
library(igraph)
library(reshape)
library(spData)
library(leaflet)
library(readr)
library(hrbrthemes)
library(viridis)
library(gapminder)
library(knitr)
library(kableExtra)
library(DT)
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv", header=T)
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv", header=T)
data <- read.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv")
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_1_slides.html")
pagedown::chrome_print(input = "C_1_slides.html", output = "C_1_slides.pdf", timeout = 9000)
