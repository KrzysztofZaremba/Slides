polygon(x = c(-4, seq(-4, -1.96, 0.01), -1.96),
y = c(0, dnorm(seq(-4, -1.96, 0.01)), 0),
col = "steelblue", alpha = 0.2)
polygon(x = c(1.96, seq(1.96, 4, 0.01), 4),
y = c(0, dnorm(seq(1.96, 4, 0.01)), 0),
col = "steelblue", alpha = 0.2)
curve(dnorm(x),
xlim = c(-4, 4),
main = "Standard normal",
yaxs = "i",
xlab = "z",
ylab = "",
lwd = 2,
axes = "F")
# add x-axis
axis(1,
at = c(-1.96, 0, 1.96),
padj = 0.75,
labels = c(expression(-z[alpha/2]),
expression(0),
expression(z[alpha/2])))
# shade the tails for the 2.5% regions
polygon(x = c(-4, seq(-4, -1.96, 0.01), -1.96),
y = c(0, dnorm(seq(-4, -1.96, 0.01)), 0),
col = "steelblue", alpha = 0.2)
polygon(x = c(1.96, seq(1.96, 4, 0.01), 4),
y = c(0, dnorm(seq(1.96, 4, 0.01)), 0),
col = "steelblue", alpha = 0.2)
# add vertical line at the mean (mu)
abline(v = 0, col = "red", lwd = 2)
# add the "2.5%" labels on tails
text(-2.2, 0.1, expression(alpha/2), col = "black", cex = 1.5)
text(2.2, 0.1, expression(alpha/2), col = "black", cex = 1.5)
text(-3.2, 0.06, "Rejection \n region", col = "black", cex = 1.5)
text(3.2, 0.06, "Rejection \n region", col = "black", cex = 1.5)
curve(dnorm(x),
xlim = c(-4, 4),
main = "Standard normal",
yaxs = "i",
xlab = "z",
ylab = "",
lwd = 2,
axes = "F")
# add x-axis
axis(1,
at = c(-1.96, 0, 1.96),
padj = 0.75,
labels = c(expression(-z[alpha/2]),
expression(0),
expression(z[alpha/2])))
# shade the tails for the 2.5% regions
polygon(x = c(-4, seq(-4, -1.96, 0.01), -1.96),
y = c(0, dnorm(seq(-4, -1.96, 0.01)), 0),
col = "steelblue", alpha = 0.2)
polygon(x = c(1.96, seq(1.96, 4, 0.01), 4),
y = c(0, dnorm(seq(1.96, 4, 0.01)), 0),
col = "steelblue", alpha = 0.2)
# add vertical line at the mean (mu)
abline(v = 0, col = "red", lwd = 2)
# add the "2.5%" labels on tails
text(-2.2, 0.1, expression(alpha/2), col = "black", cex = 1.5)
text(2.2, 0.1, expression(alpha/2), col = "black", cex = 1.5)
text(-3.2, 0.09, "Rejection \n region", col = "black", cex = 1.5)
text(3.2, 0.09, "Rejection \n region", col = "black", cex = 1.5)
curve(dnorm(x),
xlim = c(-4, 4),
main = "Standard normal",
yaxs = "i",
xlab = "z",
ylab = "",
lwd = 2,
axes = "F")
# add x-axis
axis(1,
at = c(-1.96, 0, 1.96),
padj = 0.75,
labels = c(expression(-z[alpha/2]),
expression(0),
expression(z[alpha/2])))
# shade the tails for the 2.5% regions
polygon(x = c(-4, seq(-4, -1.96, 0.01), -1.96),
y = c(0, dnorm(seq(-4, -1.96, 0.01)), 0),
col = "steelblue", alpha = 0.2)
polygon(x = c(1.96, seq(1.96, 4, 0.01), 4),
y = c(0, dnorm(seq(1.96, 4, 0.01)), 0),
col = "steelblue", alpha = 0.2)
# add vertical line at the mean (mu)
abline(v = 0, col = "red", lwd = 2)
# add the "2.5%" labels on tails
text(-2.2, 0.1, expression(alpha/2), col = "black", cex = 1.5)
text(2.2, 0.1, expression(alpha/2), col = "black", cex = 1.5)
text(-3.2, 0.2, "Rejection \n region", col = "black", cex = 1.5)
text(3.2, 0.2, "Rejection \n region", col = "black", cex = 1.5)
curve(dnorm(x),
xlim = c(-4, 4),
main = "Standard normal",
yaxs = "i",
xlab = "z",
ylab = "",
lwd = 2,
axes = "F")
# add x-axis
axis(1,
at = c(-1.96, 0, 1.96),
padj = 0.75,
labels = c(expression(-z[alpha/2]),
expression(0),
expression(z[alpha/2])))
# shade the tails for the 2.5% regions
polygon(x = c(-4, seq(-4, -1.96, 0.01), -1.96),
y = c(0, dnorm(seq(-4, -1.96, 0.01)), 0),
col = "steelblue", alpha = 0.2)
polygon(x = c(1.96, seq(1.96, 4, 0.01), 4),
y = c(0, dnorm(seq(1.96, 4, 0.01)), 0),
col = "steelblue", alpha = 0.2)
# add vertical line at the mean (mu)
abline(v = 0, col = "red", lwd = 2)
# add the "2.5%" labels on tails
text(-2.4, 0.1, expression(alpha/2), col = "black", cex = 1.5)
text(2.4, 0.1, expression(alpha/2), col = "black", cex = 1.5)
text(-3.1, 0.2, "Rejection \n region", col = "black", cex = 1.5)
text(3.2, 0.2, "Rejection \n region", col = "black", cex = 1.5)
curve(dnorm(x),
xlim = c(-4, 4),
main = "Standard normal",
yaxs = "i",
xlab = "z",
ylab = "",
lwd = 2,
axes = "F")
# add x-axis
axis(1,
at = c(-1.96, 0, 1.96),
padj = 0.75,
labels = c(expression(-z[alpha/2]),
expression(0),
expression(z[alpha/2])))
# shade the tails for the 2.5% regions
polygon(x = c(-4, seq(-4, -1.96, 0.01), -1.96),
y = c(0, dnorm(seq(-4, -1.96, 0.01)), 0),
col = "steelblue", alpha = 0.2)
polygon(x = c(1.96, seq(1.96, 4, 0.01), 4),
y = c(0, dnorm(seq(1.96, 4, 0.01)), 0),
col = "steelblue", alpha = 0.2)
# add vertical line at the mean (mu)
abline(v = 0, col = "red", lwd = 2)
# add the "2.5%" labels on tails
text(-3, 0.05, expression(alpha/2), col = "black", cex = 1.5)
text(3,  0.05, expression(alpha/2), col = "black", cex = 1.5)
text(-3.1, 0.2, "Rejection \n region", col = "black", cex = 1.5)
text(3.2, 0.2, "Rejection \n region", col = "black", cex = 1.5)
curve(dnorm(x),
xlim = c(-4, 4),
main = "Standard normal",
yaxs = "i",
xlab = "z",
ylab = "",
lwd = 2,
axes = "F")
# add x-axis
axis(1,
at = c(-1.96, 0, 1.96),
padj = 0.75,
labels = c(expression(-z[alpha/2]),
expression(0),
expression(z[alpha/2])))
# shade the tails for the 2.5% regions
polygon(x = c(-4, seq(-4, -1.96, 0.01), -1.96),
y = c(0, dnorm(seq(-4, -1.96, 0.01)), 0),
col = "steelblue", alpha = 0.2)
polygon(x = c(1.96, seq(1.96, 4, 0.01), 4),
y = c(0, dnorm(seq(1.96, 4, 0.01)), 0),
col = "steelblue", alpha = 0.2)
# add vertical line at the mean (mu)
abline(v = 0, col = "red", lwd = 2)
# add the "2.5%" labels on tails
text(-3, 0.05, expression(alpha/2), col = "steelblue", cex = 1.5)
text(3,  0.05, expression(alpha/2), col = "steelblue", cex = 1.5)
text(-3.1, 0.2, "Rejection \n region", col = "black", cex = 1.5)
text(3.2, 0.2, "Rejection \n region", col = "black", cex = 1.5)
---
xaringan::inf_mr()
x_values <- seq(-3, 3, by = 0.01)
# Define the rejection region threshold
rejection_threshold <- 1.645
# Create a data frame
data <- data.frame(x = x_values, y = dnorm(x_values))
# Create the plot
p <- ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue") +
geom_area(data = subset(data, x > rejection_threshold), aes(x = x, y = y), fill = "red", alpha = 0.3) +
geom_vline(xintercept = rejection_threshold, linetype = "dashed", color = "red") +
labs(title = "Rejection Region", x = "X", y = "Density") +
theme_minimal()
# Print the plot
print(p)
library(tidyverse)
x_values <- seq(-3, 3, by = 0.01)
# Define the rejection region threshold
rejection_threshold <- 1.645
# Create a data frame
data <- data.frame(x = x_values, y = dnorm(x_values))
# Create the plot
p <- ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue") +
geom_area(data = subset(data, x > rejection_threshold), aes(x = x, y = y), fill = "red", alpha = 0.3) +
geom_vline(xintercept = rejection_threshold, linetype = "dashed", color = "red") +
labs(title = "Rejection Region", x = "X", y = "Density") +
theme_minimal()
# Print the plot
print(p)
data <- data.frame(y = 1)
# Create the plot with a horizontal line at y = 1.645
p <- ggplot(data, aes(y = y)) +
geom_hline(yintercept = 1.645, linetype = "dashed", color = "red") +
labs(title = "Rejection Region", y = "Y") +
theme_minimal()
# Print the plot
print(p)
# Create a data frame with a single row for the horizontal line
data <- data.frame(y = 1)
# Create the plot with a solid horizontal line and a shaded rejection region
p <- ggplot(data, aes(y = y)) +
geom_hline(yintercept = 1, color = "black") +  # Solid horizontal line
geom_rect(aes(xmin = -Inf, xmax = 1.645, ymin = -Inf, ymax = Inf),
fill = "red", alpha = 0.3) +  # Shaded rejection region
labs(title = "Rejection Region", y = NULL, x = NULL) +
theme_minimal() +
theme(axis.text = element_blank(), axis.title = element_blank())  # Hide axis text and labels
# Print the plot
print(p)
xaringan::inf_mr()
20/6
10/3.333
3+1.645
5/3.333
1.5+1.645
-3+1.645
1-0.0885
xaringan::inf_mr()
7*7
2-(1.96*(20/7))
2+(1.96*(20/7))
-2*7
2+(1.96*(1/7))
2-(1.96*(1/7))
3-(1.96*(1/7))
3/7
1/0.428
3-(1.96*(3/7))
3+(1.96*(3/7))
xaringan::inf_mr()
xaringan::inf_mr()
---
Case 2
xaringan::inf_mr()
0.5/2
*6
0.25*6
--
**Example**:
cnorm(1.5)
dnorm(1.5)
?dnorm
qnorm(1.5)
pnorm(1.5)
fnorm(1.5)
pnorm(1.5)
qnorm(0.933)
load("sample_listing.Rda")
library(tidyverse)
ggplot(data=Sample_list, aes(review_score_cleanliness, price))+
geom_point()
ggplot(data=Sample_list, aes(review_scores_cleanliness, price))+
geom_point()
ggplot(data=Sample_list, aes(review_scores_cleanliness, price))+
geom_point() +
geom_smooth(method = "loess", fill='darkred', level=0.90)
ggplot(data=Sample_list, aes(review_scores_cleanliness, price))+
geom_point() +
geom_smooth(method = "line", fill='darkred', level=0.90)
ggplot(data=Sample_list, aes(review_scores_cleanliness, price))+
geom_point() +
geom_smooth(method = "loess", fill='darkred', level=0.90)
ggplot(data=Sample_list, aes(review_scores_cleanliness, price))+
geom_point() +
geom_smooth(method = "loess", fill=NA, level=0.90)
library(fixest)
feols(price~review_scores_cleanliness, data=Sample_list)
ggplot(data=Sample_list, aes(review_scores_cleanliness, price))+
geom_histogram()
ggplot(data=Sample_list, aes(review_scores_cleanliness, price))+
geom_hist()
ggplot(data=Sample_list, aes(review_scores_cleanliness))+
geom_hist()
ggplot(data=Sample_list, aes(review_scores_cleanliness))+
geom_histogram()
ggplot(data=Sample_list, aes(price))+
geom_histogram()
corr(Sample_list$review_scores_cleanliness, Sample_list$price)
cor(Sample_list$review_scores_cleanliness, Sample_list$price)
0.159^2
p=cor(Sample_list$review_scores_cleanliness, Sample_list$price)
p*sqrt(98)
p*sqrt(98)/sqrt(1-0.025)
feols(price~review_scores_cleanliness, data=Sample_list)
p
p=cor(Sample_list$review_scores_cleanliness, Sample_list$price)
p*sqrt(98)/sqrt(1-0.025)
dnorm(p)
pnorm(p)
t=p*sqrt(98)/sqrt(1-0.025)
pnorm(t)
feols(price~review_scores_cleanliness, data=Sample_list)
pnorm(t)
p
t=p*sqrt(198)/sqrt(1-0.025)
t
feols(price~review_scores_cleanliness, data=Sample_list)
pnorm(t)
t
pnorm(2.256)
t
?stud()
stats:pt(2.256, 198)
stats::pt(2.256, 198)
p=cor(Sample_list$review_scores_cleanliness, Sample_list$price)
p
feols(price~review_scores_cleanliness, data=Sample_list)
xaringan::inf_mr()
var(Sample_list$clean)
var(Sample_list$clean==TRUE)
var(Sample_list$price[Sample_list$clean==TRUE])
var(Sample_list$price[Sample_list$clean==FALSE])
925255.5/480681.9
xaringan::inf_mr()
sd(Sample_list$price[Sample_list$clean==TRUE])
sd(Sample_list$price[Sample_list$clean==FALSE])
sd(Sample_list$price[Sample_list$clean==FALSE])
mean(Sample_list$price[Sample_list$clean==TRUE])
mean(Sample_list$price[Sample_list$clean==FALSE])
ggplot(data = Sample_list, aes(x = Clean, y = price)) +
geom_boxplot() +
labs(title = "Boxplot of Price for Clean=True",
x = "Clean",
y = "Price")
ggplot(data = Sample_list, aes(x = clean, y = price)) +
geom_boxplot() +
labs(title = "Boxplot of Price for Clean=True",
x = "Clean",
y = "Price")
ggplot(data = Sample_list, aes(x = clean, y = price)) +
geom_boxplot() +
labs(title = "Boxplot of Price for Clean=True",
x = "Clean",
y = "Price")+
coord_flip()
ggplot(data = Sample_list, aes(x = clean, y = price)) +
geom_boxplot() +
labs(x = "Clean",
y = "Price")+
coord_flip()
xaringan::inf_mr()
df_values <- c(3, 10, 100)  # Different degrees of freedom
x_vals <- seq(0, 5, length.out = 400)
# Create a data frame for ggplot
library(ggplot2)
df1 <- data.frame(x = rep(x_vals, length(df_values)),
y = c(sapply(df_values, function(df) df(x_vals, df1 = df, df2 = 10))),  # Fix df2 at 10
distribution = rep(paste("F-distribution (df1 =", df_values, ", df2 = 10)"), each = length(x_vals)))
df2 <- data.frame(x = rep(x_vals, length(df_values)),
y = c(sapply(df_values, function(df) df(x_vals, df1 = df, df2 = 3))),  # Fix df2 at 10
distribution = rep(paste("F-distribution (df1 =", df_values, ", df2 = 3)"), each = length(x_vals)))
df=rbind(df1,df2)
# Create ggplot object
gg_plot2 <- ggplot(df, aes(x = x, y = y, color = distribution)) +
geom_line() +
labs(x = "x",
y = "Density") +
theme_minimal()
# Convert to plotly object for interactivity
library(plotly)
plotly_object <- ggplotly(gg_plot2,
width = 800,   # Adjust the width according to your preference
height = 400)  # Adjust the height according to your preference
plotly_object
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
remotes::install_github("jhelvy/xaringanBuilder")
install.packages("remotes")
remotes::install_github("jhelvy/xaringanBuilder")
library(xaringanBuilder)
remotes::install_github("jhelvy/xaringanBuilder")
library(renderthis)
build_pdf("C_3_slides_c.html")
remotes::install_github('rstudio/chromote')
to_pdf("C_3_slides_c.html")
1245-869
962^2/100+693^2/100
sqrt(14056.93)
376/118
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_3_slides_c.html")
#remotes::install_github('rstudio/chromote')
to_pdf("C_3_slides_c.html")
xaringan::inf_mr()
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
shiny::runApp('~/T_tests_tradeoff')
runApp('~/T_tests_tradeoff')
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_3_slides_c.html")
# Define the directory containing the ZIP files
zip_dir <- "C:/Users/kzysi/Dropbox/Air pollution intergenerational effect/data/births/Data_1985_2007"  # Replace with your directory path
# List all ZIP files in the directory
zip_files <- list.files(zip_dir, pattern = "\\.zip$", full.names = TRUE)
# Initialize an empty list to store dataframes
list_of_dataframes <- list()
# Loop through each ZIP file
combined_grouped_df <- NULL
zip_file=zip_files[1]
# Create a temporary directory to extract files
temp_dir <- tempfile()
dir.create(temp_dir)
# Extract the ZIP file
unzip(zip_file, exdir = temp_dir)
# List all files that start with 'NACIM' in the extracted folder
nacim_files <- list.files(temp_dir, pattern = "^NACIM", full.names = TRUE)
nacim_file=nacim_files
df <- read.dbf(nacim_file) %>%
# Select only the necessary columns
select(ENT_RESID, MUN_RESID, SEXO, ANO_NAC, MES_NAC) %>%
# Group by the selected columns and count the number of observations
group_by(ENT_RESID, MUN_RESID, SEXO, ANO_NAC, MES_NAC) %>%
summarise(Count = n(), .groups = 'drop')
df <- read.dbf(nacim_file)
library(tidyverse)
library(stringr)
library(readr)
library(foreign)
df <- read.dbf(nacim_file)
xaringan::inf_mr()
runApp('C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns_2023_2/C4/C4_a/ANOVA')
runApp('C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns_2023_2/C4/C4_a/Linear_regression')
runApp('C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns_2023_2/C4/C4_a/Guess_the_line')
runApp('C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns_2023_2/C4/C4_a/Guess_the_line')
xaringan::inf_mr()
#library(renderthis)
#options("install.lock"=FALSE)
options("install.lock"=FALSE)
install.packages("cli", type="source")
install.packages("cli", type = "source")
#library(renderthis)
#options("install.lock"=FALSE)
options("install.lock"=FALSE)
install.packages("cli", type="source")
install.packages("cli", type = "source")
#library(renderthis)
#options("install.lock"=FALSE)
options("install.lock"=FALSE)
install.packages("cli", type="source")
#library(renderthis)
#options("install.lock"=FALSE)
options("install.lock"=FALSE)
install.packages("cli", type="source")
#library(renderthis)
#options("install.lock"=FALSE)
options("install.lock"=FALSE)
install.packages("cli", type="source", INSTALL_opts = '--no-lock')
remotes::install_github("jhelvy/renderthis", force=TRUE)
#remotes::install_github('rstudio/chromote')
to_pdf("C_3_slides_c.html")
?renderthis
renderthis::to_pdf("C_3_slides_c.html")
