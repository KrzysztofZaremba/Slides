correlated_samples
correlated_samples
rowMeans(correlated_samples)
means(correlated_samples)
col_means <- means(correlated_samples)
correlated_samples
means(correlated_samples)
col_means <- means(correlated_samples)
mean(correlated_samples)
sd(true_speeds)
true_sd <- sd(true_speeds)
true_sd
sd(true_speeds)
true_sd*cov_matrix
# Custom function to generate correlated samples
generate_correlated_samples <- function(n, num_vars, cor_value) {
cov_matrix <- matrix(cor_value, nrow = num_vars, ncol = num_vars)
diag(cov_matrix) <- 1
cov_matrix=true_sd*cov_matrix
correlated_samples <- MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
col_means <- mean(correlated_samples)
col_means
}
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
generate_correlated_samples(1,10, 0.99)
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
true_mean <- mean(true_speeds)
true_sd <- sd(true_speeds)
generate_correlated_samples(1,10, 0.99)
cor_value=0.99
num_vars=10
cov_matrix <- matrix(cor_value, nrow = num_vars, ncol = num_vars)
diag(cov_matrix) <- 1
cov_matrix=true_sd*cov_matrix
cov_matrix
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
mean(correlated_samples)
# Simulate samples for n = 10
n <- 10
cor_values <- c(0.99, 0)  # Use 0 correlation for independent case
num_samples <- 10000
sample_means <- lapply(cor_values, function(cor_value) {
replicate(num_samples, generate_correlated_samples(1,10, 0.9) )
})
sample_means
# Combine both samples (correlated and independent)
all_sample_means <- c(sample_means[[1]], sample_means[[2]])
# Create a factor variable to distinguish between correlated and independent samples
sample_type <- rep(c("Correlated", "Independent"), each = num_samples)
# Create a data frame for plotting
plot_data <- data.frame(SampleMean = unlist(all_sample_means), SampleType = sample_type)
# Create a plot with density and histogram on the same graph
ggplot(plot_data, aes(x = SampleMean, fill = SampleType)) +
geom_histogram(data = subset(plot_data, SampleType == "Correlated"),
aes(y = ..density..),
binwidth = 0.05, color = "black", alpha = 0.5, position = "identity") +
geom_density(data = subset(plot_data, SampleType == "Independent"),
aes(y = ..density.. ), color = "red") +
labs(title = paste("Sampling Distribution of Sample Mean (n =", n, ")"),
x = "Sample Mean", y = "Density", fill = "Sample Type") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
# Create a plot with density and histogram on the same graph
ggplot(plot_data, aes(x = SampleMean, fill = SampleType)) +
geom_histogram(data = subset(plot_data, SampleType == "Correlated"),
aes(y = ..density..),
binwidth = 0.05, color = "black", alpha = 0.5, position = "identity") +
geom_density(data = subset(plot_data, SampleType == "Independent"),
aes(y = ..density.. ), color = "red") +
labs(title = paste("Sampling Distribution of Sample Mean (n =", n, ")"),
x = "Sample Mean", y = "Density", fill = "Sample Type") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
# Create a plot with density and histogram on the same graph
ggplot(plot_data, aes(x = SampleMean, fill = SampleType)) +
geom_histogram(data = subset(plot_data, SampleType == "Correlated"),
aes(y = ..density..),
binwidth = 0.5, color = "black", alpha = 0.5, position = "identity") +
geom_density(data = subset(plot_data, SampleType == "Independent"),
aes(y = ..density.. ), color = "red") +
labs(title = paste("Sampling Distribution of Sample Mean (n =", n, ")"),
x = "Sample Mean", y = "Density", fill = "Sample Type") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
sample_means
sapply(sample_means, std)
sapply(sample_means, sd)
sapply(sample_means, sd)
replicate(num_samples, generate_correlated_samples(1,10, 0.9)
num_samples <- 5
replicate(num_samples, generate_correlated_samples(1,10, 0.9) )
n <- 10
cor_values <- c(0.99, 0)  # Use 0 correlation for independent case
num_samples <- 10000
num_samples <- 5
sample_means <- lapply(cor_values, function(cor_value) {
replicate(num_samples, generate_correlated_samples(n,num_vars, cor_values) )
})
cor_value=0
generate_correlated_samples(1,10, 0)
cor_value=0
cov_matrix <- matrix(cor_value, nrow = num_vars, ncol = num_vars)
diag(cov_matrix) <- 1
cov_matrix=true_sd*cov_matrix
cov_matrix
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
n=1
num_vars=10
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
cor_values <- c(0.9, 0)  # Use 0 correlation for independent case
num_samples <- 10000
num_samples <- 5
cor_values <- c(0.9, 0)  # Use 0 correlation for independent case
num_samples <- 10000
sample_means <- lapply(cor_values, function(cor_value) {
replicate(num_samples, generate_correlated_samples(n, num_vars, cor_values) )
})
# Simulate samples for n = 10
n <- 1
cor_values <- c(0.9, 0)  # Use 0 correlation for independent case
num_samples <- 10000
sample_means <- lapply(cor_values, function(cor_value) {
replicate(num_samples, generate_correlated_samples(n, num_vars, cor_values) )
})
# Simulate samples for n = 10
n <- 1
cor_values <- c(0.9, 0)  # Use 0 correlation for independent case
num_samples <- 10000
sample_means <- lapply(cor_values, function(cor_value) {
replicate(num_samples, generate_correlated_samples(n, num_vars, cor_values) )
})
replicate(num_samples, generate_correlated_samples(n, num_vars, cor_values)
replicate(num_samples, generate_correlated_samples(n, num_vars, cor_values) )
replicate(num_samples, generate_correlated_samples(n, num_vars, cor_values) )
replicate(num_samples, generate_correlated_samples(n, num_vars, cor_values) )
generate_correlated_samples(n, num_vars, cor_values)
sample_means <- lapply(cor_values, function(cor_value) {
replicate(num_samples, generate_correlated_samples(n, num_vars, cor_values) )
})
cor_value=0.9
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
cov_matrix <- matrix(cor_value, nrow = num_vars, ncol = num_vars)
diag(cov_matrix) <- 1
cov_matrix=true_sd*cov_matrix
MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
replicate(num_samples, generate_correlated_samples(n, num_vars, cor_values) )
replicate(num_samples, generate_correlated_samples(n, num_vars, cor_values) )
cor_values <- c(0.9, 0)  # Use 0 correlation for independent case
num_samples <- 10000
sample_means <- lapply(cor_values, function(cor_values) {
replicate(num_samples, generate_correlated_samples(n, num_vars, cor_values) )
})
sapply(sample_means, sd)
# Combine both samples (correlated and independent)
all_sample_means <- c(sample_means[[1]], sample_means[[2]])
# Create a factor variable to distinguish between correlated and independent samples
sample_type <- rep(c("Correlated", "Independent"), each = num_samples)
# Create a data frame for plotting
plot_data <- data.frame(SampleMean = unlist(all_sample_means), SampleType = sample_type)
# Create a plot with density and histogram on the same graph
ggplot(plot_data, aes(x = SampleMean, fill = SampleType)) +
geom_histogram(data = subset(plot_data, SampleType == "Correlated"),
aes(y = ..density..),
binwidth = 0.5, color = "black", alpha = 0.5, position = "identity") +
geom_density(data = subset(plot_data, SampleType == "Independent"),
aes(y = ..density.. ), color = "red") +
labs(title = paste("Sampling Distribution of Sample Mean (n =", n, ")"),
x = "Sample Mean", y = "Density", fill = "Sample Type") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
library(ggplot2)
set.seed(123)
# Simulate potential true distribution of internet speeds in Mexico City
true_speeds <- c(rnorm(500, mean = 10, sd = 2),rnorm(500, mean = 30, sd = 6))
# Calculate the true mean
true_mean <- mean(true_speeds)
true_sd <- sd(true_speeds)
generate_correlated_samples(1,10, 0)
cor_value=0.9
num_vars=10
# Custom function to generate correlated samples
generate_correlated_samples <- function(n, num_vars, cor_value) {
cov_matrix <- matrix(cor_value, nrow = num_vars, ncol = num_vars)
diag(cov_matrix) <- 1
cov_matrix=true_sd*cov_matrix
correlated_samples <- MASS::mvrnorm(n, mu = rep(true_mean, num_vars), Sigma = cov_matrix)
col_means <- mean(correlated_samples)
col_means
}
library(ggplot2)
# Generate random data from standard normal distribution
set.seed(42)
z <- rnorm(1000, mean = 0, sd = 1)
# Calculate squared values
x <- z^2
# Create histogram
p1 <- ggplot(data.frame(x), aes(x = x)) +
geom_histogram(binwidth = 0.2, fill = "skyblue", color = "black") +
geom_vline(xintercept = 1, linetype = "dashed", color = "red") +
geom_area(data = subset(data.frame(x), x > 1), aes(x = x), fill = "lightcoral", alpha = 0.3) +
labs(title = "Transformed Data: X = Z^2",
x = "Value of X",
y = "Frequency")
p1
library(ggplot2)
# Generate random data from standard normal distribution
set.seed(42)
z <- rnorm(1000, mean = 0, sd = 1)
# Calculate squared values
x <- z^2
p1 <- ggplot(data.frame(x), aes(x = x)) +
geom_histogram(binwidth = 0.2, fill = "skyblue", color = "black")
ggplot(data.frame(x), aes(x = x)) +
geom_histogram(binwidth = 0.2, fill = "skyblue", color = "black")
ggplot(data.frame(x), aes(x = x)) +
geom_histogram(binwidth = 0.2, fill = "skyblue", color = "black") +
geom_vline(xintercept = 1, linetype = "dashed", color = "red")
ggplot(data.frame(x), aes(x = x)) +
geom_histogram(binwidth = 0.2, fill = "skyblue", color = "black") +
geom_vline(xintercept = 1, linetype = "dashed", color = "red")
ggplot(data.frame(x), aes(x = x)) +
geom_histogram(binwidth = 0.2, fill = "skyblue", color = "black") +
geom_vline(xintercept = 1, linetype = "dashed", color = "red") +
geom_area(data = subset(data.frame(x), x > 1), aes(x = x), fill = "lightcoral", alpha = 0.3)
p2 <- ggplot(data.frame(z), aes(x = z)) +
geom_histogram(binwidth = 0.2, fill = "lightgreen", color = "black") +
geom_vline(xintercept = 1, linetype = "dashed", color = "red") +
geom_area(data = subset(data.frame(z), z > 1), aes(x = z), fill = "lightcoral", alpha = 0.3) +
labs(title = "Standard Random Normal Distribution (N(0, 1))",
x = "Value of Z",
y = "Frequency")
# Create plot for Chi-Square distribution
p3 <- ggplot(data.frame(x), aes(x = x)) +
geom_histogram(binwidth = 0.2, fill = "orange", color = "black") +
geom_vline(xintercept = 1, linetype = "dashed", color = "red") +
geom_area(data = subset(data.frame(x), x > 1), aes(x = x), fill = "lightcoral", alpha = 0.3) +
labs(title = "Chi-Square Distribution (χ²(1))",
x = "Value of X",
y = "Frequency")
p2 + p3
p2
my_hist=hist(my_variable , breaks=40  , plot=F)
# Color vector
my_color= ifelse(my_hist$breaks < -1, rgb(0.2,0.8,0.5,0.5) , ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
my_hist=hist(z , breaks=40  , plot=F)
# Color vector
my_color= ifelse(my_hist$breaks < -1, rgb(0.2,0.8,0.5,0.5) , ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-40,40) )
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
my_hist=hist(z , breaks=40  , plot=F)
# Color vector
my_color= ifelse(my_hist$breaks < -1, rgb(0.2,0.2,0.2,0.2) , ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
my_hist=hist(z , breaks=40  , plot=F)
# Color vector
my_color= ifelse(my_hist$breaks < -1, rgb(0.2,0.2,0.2,0.2) , ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
# Color vector
my_color= if(|my_hist$breaks| >=1, "purple", rgb(0.2,0.2,0.2,0.2) )
# Color vector
my_color= if(abs(my_hist$breaks) >=1, "purple", rgb(0.2,0.2,0.2,0.2) )
# Color vector
my_color= if(my_hist$breaks >=1 | my_hist$breaks <(-1), "purple", rgb(0.2,0.2,0.2,0.2) )
# Color vector
my_color= if(my_hist$breaks >=1 || my_hist$breaks <(-1), "purple", rgb(0.2,0.2,0.2,0.2) )
# Color vector
my_color= if((my_hist$breaks >=1 || my_hist$breaks <(-1)), "purple", rgb(0.2,0.2,0.2,0.2) )
# Color vector
my_color= if((my_hist$breaks >=1 | my_hist$breaks <(-1)), "purple", rgb(0.2,0.2,0.2,0.2) )
my_hist=hist(z , breaks=40  , plot=F)
# Color vector
my_color= if(my_hist$breaks < -1, "purple", rgb(0.2,0.2,0.2,0.2) , ifelse (|my_hist$breaks| >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
my_hist=hist(z , breaks=40  , plot=F)
# Color vector
my_color= if(my_hist$breaks < (-1), "purple", rgb(0.2,0.2,0.2,0.2) , ifelse (|my_hist$breaks| >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
my_hist=hist(z , breaks=40  , plot=F)
# Color vector
my_color= if(my_hist$breaks < -1, "purple", rgb(0.2,0.2,0.2,0.2) , ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Create plot for Chi-Square distribution
my_hist=hist(my_variable , breaks=40  , plot=F)
my_hist=hist(z , breaks=40  , plot=F)
# Color vector
my_color= if(my_hist$breaks < -1, "purple", rgb(0.2,0.2,0.2,0.2) , ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Create data
my_variable=rnorm(2000, 0 , 10)
# Calculate histogram, but do not draw it
my_hist=hist(my_variable , breaks=40  , plot=F)
# Color vector
my_color= ifelse(my_hist$breaks < -10, rgb(0.2,0.8,0.5,0.5) , ifelse (my_hist$breaks >=10, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-40,40) )
rgb(0.2,0.8,0.5,0.5)
# Color vector
my_color= ifelse(my_hist$breaks < -1, rgb(0.2,0.8,0.5,0.5) , ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-40,40) )
# Calculate histogram, but do not draw it
my_hist=hist(z , breaks=40  , plot=F)
# Color vector
my_color= ifelse(my_hist$breaks < -1, rgb(0.2,0.8,0.5,0.5) , ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-40,40) )
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
# Calculate histogram, but do not draw it
my_hist=hist(z , breaks=100  , plot=F)
# Calculate histogram, but do not draw it
my_hist=hist(z , breaks=100  , plot=F)
# Color vector
my_color= ifelse(my_hist$breaks < -1, "purple", ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
z <- rnorm(10000, mean = 0, sd = 1)
# Calculate histogram, but do not draw it
my_hist=hist(z , breaks=100  , plot=F)
# Color vector
my_color= ifelse(my_hist$breaks < -1, "purple", ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
set.seed(42)
z <- rnorm(100000, mean = 0, sd = 1)
# Calculate squared values
x <- z^2
# Calculate histogram, but do not draw it
my_hist=hist(z , breaks=1000  , plot=F)
# Color vector
my_color= ifelse(my_hist$breaks < -1, "purple", ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
# Calculate histogram, but do not draw it
my_hist=hist(z , breaks=200  , plot=F)
# Color vector
my_color= ifelse(my_hist$breaks < -1, "purple", ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
?hist
my_hist$counts=my_hist$counts/sum(my_hist$counts)
# Calculate histogram, but do not draw it
my_hist=hist(z , breaks=200  , plot=F)
my_hist$counts=my_hist$counts/sum(my_hist$counts)
# Color vector
my_color= ifelse(my_hist$breaks < -1, "purple", ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
# Create plot for Chi-Square distribution
my_hist=hist(X , breaks=200  , plot=F)
my_hist$counts=my_hist$counts/sum(my_hist$counts)
# Calculate squared values
x <- z^2
# Create plot for Chi-Square distribution
my_hist=hist(X , breaks=200  , plot=F)
z <- rnorm(100000, mean = 0, sd = 1)
# Calculate squared values
x <- z^2
# Create plot for Chi-Square distribution
my_hist=hist(x , breaks=200  , plot=F)
my_hist$counts=my_hist$counts/sum(my_hist$counts)
# Color vector
my_color= ifelse(my_hist$breaks >=10, "purple", rgb(0.2,0.2,0.2,0.2) )
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-40,40) )
x
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(0,40) )
x
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(0,10) )
# Color vector
my_color= ifelse(my_hist$breaks >1, "purple", rgb(0.2,0.2,0.2,0.2) )
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(0,10) )
# Calculate histogram, but do not draw it
my_hist=hist(z , breaks=200  , plot=F)
my_hist$counts=my_hist$counts/sum(my_hist$counts)
# Color vector
my_color= ifelse(my_hist$breaks < -1, "purple", ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
# Create plot for Chi-Square distribution
my_hist=hist(x , breaks=200  , plot=F)
my_hist$counts=my_hist$counts/sum(my_hist$counts)
# Color vector
my_color= ifelse(my_hist$breaks >1, "purple", rgb(0.2,0.2,0.2,0.2) )
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(0,10) )
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(0,16) )
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(0,6) )
my_hist=hist(z , breaks=200  , plot=F)
my_hist$counts=my_hist$counts/sum(my_hist$counts)
# Color vector
my_color= ifelse(my_hist$breaks < -1, "purple", ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4) )
# Create plot for Chi-Square distribution
my_hist=hist(x , breaks=200  , plot=F)
my_hist$counts=my_hist$counts/sum(my_hist$counts)
# Color vector
my_color= ifelse(my_hist$breaks >1, "purple", rgb(0.2,0.2,0.2,0.2) )
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(0,6) )
library(ggplot2)
# Generate random data from standard normal distribution
set.seed(42)
z <- rnorm(100000, mean = 0, sd = 1)
# Calculate squared values
x <- z^2
# Calculate histogram, but do not draw it
my_hist=hist(z , breaks=200  , plot=F)
my_hist$counts=my_hist$counts/sum(my_hist$counts)
# Color vector
my_color= ifelse(my_hist$breaks < -1, "purple", ifelse (my_hist$breaks >=1, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-4,4), title="Standard Normal")
# Create plot for Chi-Square distribution
my_hist=hist(x , breaks=200  , plot=F)
my_hist$counts=my_hist$counts/sum(my_hist$counts)
# Color vector
my_color= ifelse(my_hist$breaks >1, "purple", rgb(0.2,0.2,0.2,0.2) )
# Final plot
plot(my_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(0,6),title="Chi(1)"  )
V=c(0.05,0.12,0.08,0.03,0.07,0.09,0.06,0.04,0.02,0.11,0.01,0.15,0.08,0.05,0.09,0.10,0.07,0.03,0.04,0.06)
x=sum(c^2)
V^2
x=sum(V^2)
x
sum(V)
weights <- c(0.05, 0.12, 0.08, 0.03, 0.07, 0.09, 0.06, 0.04, 0.02,
0.11, 0.01, 0.15, 0.08, 0.05, 0.09, 0.10, 0.07, 0.03, 0.04, 0.06)
W <- c(0.05, 0.12, 0.08, 0.03, 0.07, 0.09, 0.06, 0.04, 0.02,
0.11, 0.01, 0.15, 0.08, 0.05, 0.09, 0.10, 0.07, 0.03, 0.04, 0.06)
sum(W)
random_values <- runif(20)
# Normalize the random values to sum up to 1
normalized_values <- random_values / sum(random_values)
normalized_values
V=normalized_values
sum(V)
x=sum(V^2)
V-(1/20)
sum(V-(1/20))
x=sum((V-(1/20))^2)
x
y=sum((V-(1/20))^2)
x=sum(V^2)
y=sum((V-(1/20))^2)
library(tidyverse)
listings <- read.csv("C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns/C3/C3_a/listings.csv", comment.char="#")
View(listings)
install.packages("swirl")
library(swirl)
swirl()
5+7
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_3_slides_a.html")
(3298-400^2/50)/49
sqrt(2)
400/50
sqrt(207)
sqrt(0.207)
0.45/4
1.4142/8
8^2*50
98/49
sqrt(50)
qnorm(0.99)
8-1.41*2.32/7.071
sqrt(1000)
300-500
-200/31
50/31
1.28155*5
+7
library(renderthis)
#remotes::install_github('rstudio/chromote')
to_pdf("C_3_slides_a.html")
#library(renderthis)
#to_pdf("C_2_slides_c.html")
pagedown::chrome_print(input = "C_3_slides_pdf.html", output = "C_3_slides_a.pdf", timeout = 300)
#remotes::install_github('rstudio/chromote')
to_pdf("C_3_slides_pdf.html")
