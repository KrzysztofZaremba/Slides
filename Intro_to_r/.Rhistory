listings <- read.csv("C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns/Intro_to_r/listings.csv", comment.char="#")
View(listings)
# how many columns we have?
nrow(listings)
# how many rows
ncol(listings)
#####Some data cleaning
##mean price
mean(listings$price) ## ops, it thinks it is a character variable
listings$price =gsub(",", "", listings$price)
listings$price = gsub("\\$", "", listings$price)
listings$price=as.numeric(listings$price)
mean(listings$price)
listings <- read.csv("C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns/Intro_to_r/listings.csv", comment.char="#")
# how many columns we have?
nrow(listings)
# how many rows
ncol(listings)
#####Some data cleaning
##mean price
mean(listings$price) ## ops, it thinks it is a character variable
listings$price =gsub(",", "", listings$price)
listings$price
listings$price
listings$price=as.numeric(listings$price)
listings$price
listings <- read.csv("C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns/Intro_to_r/listings.csv", comment.char="#")
# how many columns we have?
nrow(listings)
# how many rows
ncol(listings)
#####Some data cleaning
##mean price
mean(listings$price) ## ops, it thinks it is a character variable
listings$price =gsub(",", "", listings$price)
listings$price = gsub("\\$", "", listings$price)
listings$price
listings$price=as.numeric(listings$price)
listings$price
mean(listings$price)
##how many NAs we have?
sum(is.na(listings$price))
is.na(listings$price)
##omit those with NA
mean(listings$price, na.rm=TRUE)
##Removing missing observations
listings=listings[!is.na(listings$price),]
mean(listings$price)
##find worst score with at least 10 reviews
listings$review_scores_rating=as.numeric(listings$review_scores_rating)
listings_10_reviews=listings$review_scores_rating[listings$number_of_reviews>10]
summary(listings_10_reviews)
##which one is it?
worst_listing=listings[listings$number_of_reviews>10 & listings$review_scores_rating==0,]
###there are usually multiple ways to do the same thing as there are multiple functions
install.package(tidyverse)
library(tidyverse)
listings%>%
filter(number_of_reviews>10)%>%
filter(review_scores_rating==0)
worst_listing=listings%>%
filter(number_of_reviews>10)%>%
filter(review_scores_rating==0)
#### Which neighborhoods have most of the airbnbs?
table(listings$neighbourhood_group_cleansed)
#### Which neighborhoods have most of the airbnbs?
table(listings$neighbourhood_cleansed)
barplot(table(listings$neighbourhood_cleansed))
barplot(table(listings$neighbourhood_cleansed), las=2)
par(mar = c(5, 8, 4, 2) + 0.1)  # c(bottom, left, top, right)
barplot(table(listings$neighbourhood_cleansed), las=1.5)
barplot(table(listings$neighbourhood_cleansed), las=1)
barplot(table(listings$neighbourhood_cleansed), las=3)
barplot(table(listings$neighbourhood_cleansed), las=2)
barplot(table(listings$neighbourhood_cleansed), las=4)
barplot(table(listings$neighbourhood_cleansed), las=2)
barplot(table(listings$neighbourhood_cleansed), las=3)
barplot(table(listings$neighbourhood_cleansed), las=2)
### We will sort it so it looks nicer
freq_table=table(listings$neighbourhood_cleansed)
freq_df <- data.frame(Category = names(freq_table), Frequency = freq_table)
View(freq_df)
freq_df <- data.frame(Frequency = freq_table)
View(freq_df)
# Create the plot
ggplot(freq_df, aes(x = reorder(Category, Frequency), y = Frequency)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Bar Plot", x = "Categories", y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(freq_df, aes(x = reorder(Category, Frequency), y = Frequency)) +
geom_bar(stat = "identity", fill = "blue")
# Create the plot
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Bar Plot", x = "Categories", y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Create the plot
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Bar Plot", x = "Categories", y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(minimal)
# Create the plot
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Bar Plot", x = "Categories", y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme_minimal()
# Create the plot
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity") +
labs(title = "Bar Plot", x = "Categories", y = "Frequency") +
theme_minimal()_
# Create the plot
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity") +
labs(title = "Bar Plot", x = "Categories", y = "Frequency") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Create the plot
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity") +
labs(title = "Bar Plot", x = "Neighborhood", y = "Frequency") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Create the plot
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity")
# Create the plot ## it's all about adding subsequent layers
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity")
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title = "Bar Plot", x = "Neighborhood", y = "Frequency")
# Create the plot, make a nicer looking one
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title = "Bar Plot", x = "Neighborhood", y = "Frequency") +
theme_minimal()
# Create the plot, make a nicer looking one
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity")+
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title = "Bar Plot", x = "Neighborhood", y = "Frequency")
# Create the plot, make a nicer looking one
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity")+
theme_minimal() + ##it needs to be before the other "theme" element
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title = "Neighborhood by the number of listings", x = "Neighborhood", y = "Frequency")
# Create the plot ## it's all about adding subsequent layers
ggplot(freq_df, aes(x = Frequency.Var1, y = Frequency.Freq)) +
geom_bar(stat = "identity")
# Create the plot, rotate the text and add the labels
ggplot(freq_df, aes(x = Frequency.Var1, y = Frequency.Freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title = "Bar Plot", x = "Neighborhood", y = "Frequency")
###order by the most frequent onesx
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq))  +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title = "Bar Plot", x = "Neighborhood", y = "Frequency")
# Create the plot, make a nicer looking one
ggplot(freq_df, aes(x = reorder(Frequency.Var1, Frequency.Freq), y = Frequency.Freq)) +
geom_bar(stat = "identity")+
theme_minimal() + ##it needs to be before the other "theme" element
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(title = "Neighborhoods by the number of listings", x = "Neighborhood", y = "Frequency")
ggplot(listings, aes(x=price)) +
geom_hist()+
theme_minimal()
ggplot(listings, aes(x=price)) +
geom_histogram()+
theme_minimal()
###adjust the number of bins
ggplot(listings, aes(x=price)) +
geom_histogram(bins=100)+
theme_minimal()
###adjust the number of bins
ggplot(listings, aes(x=price)) +
geom_boxplot()+
theme_minimal()
expensive_listing=listings%>%
filter(price>100000)
View(expensive_listing)
###let's eliminate these with price above 100000
listing_no_outliers=listings%>%
filter(price>100000)
ggplot(listings_no_outliers, aes(x=price)) +
geom_histogram()+
theme_minimal()
###let's eliminate these with price above 100000
listing_no_outliers=listings%>%
filter(price>100000)
###let's eliminate these with price above 100000
listings_no_outliers=listings%>%
filter(price>100000)
ggplot(listings_no_outliers, aes(x=price)) +
geom_histogram()+
theme_minimal()
###let's eliminate these with price above 100000
listings_no_outliers=listings%>%
filter(price<100000)
ggplot(listings_no_outliers, aes(x=price)) +
geom_histogram()+
theme_minimal()
expensive_listing=listings%>%
filter(price>25000)
###let's eliminate these with price above 100000
listings_no_outliers=listings%>%
filter(price<25000)
ggplot(listings_no_outliers, aes(x=price)) +
geom_histogram()+
theme_minimal()
ggplot(listings_no_outliers, aes(x=price)) +
geom_boxplot()+
theme_minimal()
ggplot(listings_no_outliers, aes(y=value, x=property_type)) +
geom_bar(position="fill", stat="identity")
ggplot(listings_no_outliers, aes(x=property_type)) +
geom_bar(position="fill", stat="identity")
ggplot(listings_no_outliers, aes(x=property_type)) +
geom_bar(position="fill", stat="count")
table(listings_no_outliers$property_type)
table(listings_no_outliers$room_type)
ggplot(listings_no_outliers, aes(x=room_type)) +
geom_bar(position="fill", stat="count")
ggplot(listings_no_outliers, aes(fill=room_type)) +
geom_bar(position="fill", stat="count")
ggplot(listings_no_outliers, aes(fill=room_type)) +
geom_pie(position="fill", stat="count")
ggplot(listings_no_outliers, aes(fill=room_type)) +
geom_bar(position="fill", stat="count")+
coord_polar("y", start = 0)+
table(listings_no_outliers$room_type)
ggplot(listings_no_outliers, aes(fill=room_type)) +
geom_bar(position="fill", stat="count")+
coord_polar("y", start = 0)
ggplot(listings_no_outliers, aes(fill=room_type)) +
geom_bar(stat="count")+
coord_polar("y", start = 0)
ggplot(listings_no_outliers, aes(x=room_type)) +
geom_bar(stat="count")+
coord_polar("y", start = 0)
room_counts_df <- data.frame(RoomType = names(room_counts), Count = as.vector(room_counts))
room_counts <- table(listings$room_type)
room_counts
room_counts <- table(listings$room_type)
room_counts_df <- data.frame(RoomType = names(room_counts), Count = as.vector(room_counts))
room_counts_df
# Create a pie chart using ggplot2
pie_chart <- ggplot(room_counts_df, aes(x = "", y = Count, fill = RoomType)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = "Distribution of Room Types")
pie_chart
##What is the true mean price? we saw it before
mean(listings$price, na.rm=TRUE)
##What is the true mean price? we saw it before
mean(listings$price, na.rm=TRUE)
sd(listings$price, na.rm=TRUE)
#Step 1. Create a sample of 100 listings. Calculate mean price, standard deviation, and the confidence interval
sample<- listings %>%
sample_n(100, replace = FALSE)
mean(sample)
mean(sample, na.rm=TRUE)
mean(sample$price, na.rm=TRUE)
##What is the true mean price? we saw it before
mean(listings$price, na.rm=TRUE)
m=mean(sample$price, na.rm=TRUE)
sdev=sd(listings$price, na.rm=TRUE)
sd(listings$price, na.rm=TRUE)
CI95_lower=m-sdev*1.96/sqrt(100)
CI95_upper=m+sdev*1.96/sqrt(100)
CI95_lower
CI95_upper
sdev*1.96
sdev*1.96/sqrt(100)
#Step 1. Create a sample of 100 listings. Calculate mean price, standard deviation, and the confidence interval
sample<- listings %>%
sample_n(200, replace = FALSE)
m=mean(sample$price, na.rm=TRUE)
sdev=sd(listings$price, na.rm=TRUE)
sdev
CI95_lower=m-sdev*1.96/sqrt(200)
CI95_lower
CI95_upper
#Step 1. Create a sample of 100 listings. Calculate mean price, standard deviation, and the confidence interval
sample<- listings %>%
sample_n(300, replace = FALSE)
m=mean(sample$price, na.rm=TRUE)
sdev=sd(listings$price, na.rm=TRUE)
CI95_lower=m-sdev*1.96/sqrt(200)
CI95_upper=m+sdev*1.96/sqrt(200)
m
sdev
CI95_lower
CI95_upper
CI95_lower
CI95_lower=m-sdev*1.96/sqrt(300)
m-sdev*1.96/sqrt(300)
m+sdev*1.96/sqrt(300)
m-sdev*1.96/sqrt(300)
m+sdev*1.96/sqrt(300)
#Step 1. Create a sample of 300 listings. Calculate mean price, standard deviation, and the confidence interval
sample<- listings %>%
sample_n(100, replace = FALSE)
m=mean(sample$price, na.rm=TRUE)
sdev=sd(listings$price, na.rm=TRUE)
CI95_lower=m-sdev*1.96/sqrt(100)
CI95_upper=m+sdev*1.96/sqrt(100)
sample
CI95_lower
CI95_upper
#Step 1. Create a sample of 300 listings. Calculate mean price, standard deviation, and the confidence interval
sample <- listings %>%
sample_n(500, replace = FALSE)
m=mean(sample$price, na.rm=TRUE)
sdev=sd(listings$price, na.rm=TRUE)
CI95_lower=m-sdev*1.96/sqrt(500)
CI95_upper=m+sdev*1.96/sqrt(500)
CI95_lower
CI95_upper
#construct a loop
for (i in 1:500){
sample <- listings %>%
sample_n(500, replace = FALSE)
m[i]=mean(sample$price, na.rm=TRUE)
sdev[i]=sd(listings$price, na.rm=TRUE)
CI95_lower[i]=m-sdev*1.96/sqrt(500)
CI95_upper[i]=m+sdev*1.96/sqrt(500)
}
##put them together in a dataframe
sampling_distribution=data.frame(m,CI95_lower,CI95_upper)
#construct a loop, it will create vectors of prices
for (i in 1:500){
sample <- listings %>%
sample_n(500, replace = FALSE)
m[i]=mean(sample$price, na.rm=TRUE)
sdev[i]=sd(listings$price, na.rm=TRUE)
CI95_lower[i]=m-sdev*1.96/sqrt(500)
CI95_upper[i]=m+sdev*1.96/sqrt(500)
}
warnings()
#construct a loop, it will create vectors of prices
for (i in 1:500){
sample <- listings %>%
sample_n(500, replace = FALSE)
m[i]=mean(sample$price, na.rm=TRUE)
sdev[i]=sd(listings$price, na.rm=TRUE)
CI95_lower[i]=m[i]-sdev[i]*1.96/sqrt(500)
CI95_upper[i]=m[i]+sdev[i]*1.96/sqrt(500)
}
for (i in 1:10){
i+10
}
i*2
print(i+10)
for (i in 1:10){
i*2
print(i+10)
}
##put them together in a dataframe
sampling_distribution=data.frame(m,CI95_lower,CI95_upper)
ggplot(sampling_distribution, aes(x=m)) +
geom_histogram()+
theme_minimal()
ggplot(sampling_distribution, aes(x=m)) +
geom_histogram(bins=100)+
theme_minimal()
ggplot(sampling_distribution, aes(x=m)) +
geom_histogram(bins=50)+
theme_minimal()
mean(sampling_distribution$m)
##What is the true mean price? we saw it before
mean(listings$price, na.rm=TRUE)
sd(sampling_distribution$m)
#Step 4. Check what share of confidence intervals cover the true mean.
true_mean=mean(listings$price, na.rm=TRUE)
true_mean
sampling_distribution$
sampling_distribution$CI95_lower
sampling_distribution$CI95_lower
sampling_distribution$CI95_lower
sampling_distribution$CI95_lower<true_mean
sampling_distribution$CI95_lower<true_mean & sampling_distribution$CI95_upper>true_mean
sampling_distribution$CI95_lower<true_mean
mean_check=sampling_distribution$CI95_lower<true_mean & sampling_distribution$CI95_upper>true_mean # it will give true only if two conditions are true
mean_check
sum(mean_check)/500
