titlePanel("Linear Regression with Error Terms"),
tabsetPanel(
tabPanel("Error Term",
sidebarLayout(
sidebarPanel(
actionButton("add_errors", "Add 100 Error Terms")
),
mainPanel(
plotOutput("regression_plot"),
plotOutput("error_histogram"),
textOutput("sum_errors")
)
)
)
)
)
server <- function(input, output, session) {
# Initialize the data frame with the regression line
data_df <- data.frame(x = seq(-120, 120), y = 0.5 * seq(-120, 120))
# Initialize reactiveValues to store error_terms and sum_errors
rv <- reactiveValues(error_terms = data.frame(x = numeric(0), y = numeric(0)),
sum_errors = 0)
observeEvent(input$add_errors, {
# Generate 100 error terms with a normal distribution (mean = 0, sd = 10)
new_errors <- data.frame(x = rnorm(100, mean = 0, sd = 10), y = rnorm(100, mean = 0, sd = 10))
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$y)
# Combine new_data with existing error_terms
rv$error_terms <- rbind(rv$error_terms, new_data)
# Calculate and accumulate the sum of errors
sum_errors <- sum(new_errors$y)
rv$sum_errors <- rv$sum_errors + sum_errors
# Update the scatterplot
output$regression_plot <- renderPlot({
plot <- ggplot() +
geom_line(data = data_df, aes(x = x, y = y), color = "blue") +
geom_point(data = rv$error_terms, aes(x = x, y = y), color = "red", alpha = 0.1, shape = 16, size = 3) +
labs(title = "Linear Regression with Error Terms") +
theme_minimal() +
scale_x_continuous(limits = c(-120, 120)) +
scale_y_continuous(limits = c(-50, 50))
print(plot)
})
# Update the histogram of errors
output$error_histogram <- renderPlot({
error_histogram <- ggplot(data = rv$error_terms, aes(x = y)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
labs(title = "Histogram of Errors") +
theme_minimal()
print(error_histogram)
})
})
output$sum_errors <- renderText({
paste("Sum of Errors:", rv$sum_errors)
})
}
shinyApp(ui, server)
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
# Initialize the data frame with the regression line
data_df <- data.frame(x = seq(-120, 120), y = 0.5 * seq(-120, 120))
# Generate 100 error terms with a normal distribution (mean = 0, sd = 10)
new_errors <- data.frame(x = rnorm(100, mean = 0, sd = 10), y = rnorm(100, mean = 0, sd = 10))
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
data_df
data_df$x + new_errors$x
data_df$x + new_errors$x
data_df$x + new_errors$x
data_df$x + new_errors$x
data_df$x + new_errors$x
data_df$x + new_errors$x
data_df$x + new_errors$x
data_df$x + new_errors$x
data_df$x + new_errors$x
data_df$x + new_errors$x
data_df$x + new_errors$x
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
# Generate 100 uncorrelated error terms with a normal distribution (mean = 0, sd = 10)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
new_errors$error
hist(new_errors$error)
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
mean(new_errors$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
new_data$error
hist(new_data$error)
# Combine new_data with existing error_terms
rv_uncor$error_terms <- rbind(rv_uncor$error_terms, new_data)
hist(new_errors$y)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_errors$y)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_errors$y)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_errors$y)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_errors$y)
hist(new_data$error)
hist(new_errors$y)
hist(new_data$error)
rnorm(241, mean = 0, sd = 10)
rnorm(241, mean = 0, sd = 10)
rnorm(241, mean = 0, sd = 10)
rnorm(241, mean = 0, sd = 10)
rnorm(241, mean = 0, sd = 10)
rnorm(241, mean = 0, sd = 10)
rnorm(241, mean = 0, sd = 10)
rnorm(241, mean = 0, sd = 10)
rnorm(241, mean = 0, sd = 10)
rnorm(241, mean = 0, sd = 10)
hist(new_errors$y)
# Generate 100 uncorrelated error terms with a normal distribution (mean = 0, sd = 10)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
hist(new_errors$y)
y = data_df$y
new_errors$error
new_errors$error
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
new_errors$error
error = new_errors$error
error
error
error
error
error
error
error
error
hist(new_data$y)
hist(new_data$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$y)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$error)
new_errors <- data.frame(x = rnorm(241, mean = 0, sd = 10), y = rnorm(241, mean = 0, sd = 10))
# Calculate the error as y - 0.5x
new_errors$error <- new_errors$y
# Add the error terms to the regression line to create new x-values
new_x <- data_df$x + new_errors$x
new_data <- data.frame(x = new_x, y = data_df$y + new_errors$error, error = new_errors$error)
hist(new_data$error)
rv_uncor$error_terms <- rbind(rv_uncor$error_terms, new_data)
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
runApp('~/OLS_assumptions')
library(ggplot2)
# Simulate a linear regression model with non-homogeneous errors
set.seed(123)
x <- rnorm(100)  # Predictor variable
y <- 2 * x + rnorm(100, mean = 0, sd = 1 + abs(x))  # Response variable with non-homogeneous errors
# Fit a linear regression model
model <- lm(y ~ x)
# Create a data frame with the residuals and fitted values
residuals_df <- data.frame(
Fitted = predict(model),
Residuals = residuals(model)
)
# Create a scatterplot of residuals against fitted values
ggplot(residuals_df, aes(x = Fitted, y = Residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(
title = "Scatterplot of Residuals vs. Fitted Values",
x = "Fitted Values",
y = "Residuals"
) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Simulate data with increasing variance of residuals
set.seed(123)
x <- seq(1, 100, by = 1)  # Predictor variable
y <- 2 * x + rnorm(100, mean = 0, sd = 0.1 * x)  # Response variable with increasing variance
# Fit a linear regression model
model <- lm(y ~ x)
# Create a data frame with the data
data_df <- data.frame(
x = x,
y = y
)
# Create a scatterplot of the data points and add the regression line
ggplot(data_df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "blue") +
labs(
title = "Scatterplot of Data with Increasing Residual Variance",
x = "Predictor Variable (x)",
y = "Response Variable (y)"
) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Simulate data with increasing variance of residuals
set.seed(123)
x <- seq(1, 100, by = 1)  # Predictor variable
y <- 2 * x + rnorm(100, mean = 0, sd = 0.5 * x)  # Response variable with increasing variance
# Fit a linear regression model
model <- lm(y ~ x)
# Create a data frame with the data
data_df <- data.frame(
x = x,
y = y
)
# Create a scatterplot of the data points and add the regression line
ggplot(data_df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "blue") +
labs(
title = "Scatterplot of Data with Increasing Residual Variance",
x = "Predictor Variable (x)",
y = "Response Variable (y)"
) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Simulate data with increasing variance of residuals
set.seed(123)
x <- seq(1, 100, by = 1)  # Predictor variable
y <- 2 * x + rnorm(200, mean = 0, sd = 0.5 * x)  # Response variable with increasing variance
# Fit a linear regression model
model <- lm(y ~ x)
# Load necessary libraries
library(ggplot2)
# Simulate data with increasing variance of residuals
set.seed(123)
x <- seq(1, 200, by = 1)  # Predictor variable
y <- 2 * x + rnorm(200, mean = 0, sd = 0.5 * x)  # Response variable with increasing variance
# Fit a linear regression model
model <- lm(y ~ x)
# Create a data frame with the data
data_df <- data.frame(
x = x,
y = y
)
# Create a scatterplot of the data points and add the regression line
ggplot(data_df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "blue") +
labs(
title = "Scatterplot of Data with Increasing Residual Variance",
x = "Predictor Variable (x)",
y = "Response Variable (y)"
) +
theme_minimal()
library(ggplot2)
# Simulate data with increasing variance of residuals
set.seed(123)
x <- seq(1, 200, by = 1)  # Predictor variable
y <- 2 * x + rnorm(200, mean = 0, sd = 0.5 * x)  # Response variable with increasing variance
# Fit a linear regression model
model <- lm(y ~ x)
# Create a data frame with the data
data_df <- data.frame(
x = x,
y = y
)
# Create a data frame with predicted values from the model
predicted_df <- data.frame(
x = x,
y_pred = predict(model)
)
# Create a scatterplot of the data points
# Add the regression line and dashed lines to show deviations
ggplot(data_df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "blue") +
geom_segment(data = predicted_df, aes(xend = x, yend = y_pred), linetype = "dashed", color = "red") +
labs(
title = "Scatterplot of Data with Increasing Residual Variance",
x = "Predictor Variable (x)",
y = "Response Variable (y)"
) +
theme_minimal()
# Create a scatterplot of the data points
# Add the regression line and dashed lines to show deviations
ggplot(data_df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "blue") +
geom_segment(data = predicted_df, aes(xend = x, yend = y_pred), linetype = "dashed", color = "gray", alpha=0.5) +
labs(
title = "Scatterplot of Data with Increasing Residual Variance",
x = "Predictor Variable (x)",
y = "Response Variable (y)"
) +
theme_minimal()
# Create a scatterplot of the data points
# Add the regression line and dashed lines to show deviations
ggplot(data_df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "blue") +
geom_segment(data = predicted_df, aes(xend = x, yend = y_pred), linetype = "dashed", color = "gray", alpha=0.7) +
labs(
title = "Scatterplot of Data with Increasing Residual Variance",
x = "Predictor Variable (x)",
y = "Response Variable (y)"
) +
theme_minimal()
