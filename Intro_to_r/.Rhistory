library(ggplot2)
# Simulate data with increasing variance of residuals
set.seed(123)
x <- seq(1, 100, by = 1)  # Predictor variable
y <- 2 * x + rnorm(100, mean = 0, sd = 0.5 * x)  # Response variable with increasing variance
# Fit a linear regression model
model <- lm(y ~ x)
# Create a data frame with the data
data_df <- data.frame(
x = x,
y = y
)
# Create a scatterplot of the data points and add the regression line
ggplot(data_df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "blue") +
labs(
title = "Scatterplot of Data with Increasing Residual Variance",
x = "Predictor Variable (x)",
y = "Response Variable (y)"
) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Simulate data with increasing variance of residuals
set.seed(123)
x <- seq(1, 100, by = 1)  # Predictor variable
y <- 2 * x + rnorm(200, mean = 0, sd = 0.5 * x)  # Response variable with increasing variance
# Fit a linear regression model
model <- lm(y ~ x)
# Load necessary libraries
library(ggplot2)
# Simulate data with increasing variance of residuals
set.seed(123)
x <- seq(1, 200, by = 1)  # Predictor variable
y <- 2 * x + rnorm(200, mean = 0, sd = 0.5 * x)  # Response variable with increasing variance
# Fit a linear regression model
model <- lm(y ~ x)
# Create a data frame with the data
data_df <- data.frame(
x = x,
y = y
)
# Create a scatterplot of the data points and add the regression line
ggplot(data_df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "blue") +
labs(
title = "Scatterplot of Data with Increasing Residual Variance",
x = "Predictor Variable (x)",
y = "Response Variable (y)"
) +
theme_minimal()
library(ggplot2)
# Simulate data with increasing variance of residuals
set.seed(123)
x <- seq(1, 200, by = 1)  # Predictor variable
y <- 2 * x + rnorm(200, mean = 0, sd = 0.5 * x)  # Response variable with increasing variance
# Fit a linear regression model
model <- lm(y ~ x)
# Create a data frame with the data
data_df <- data.frame(
x = x,
y = y
)
# Create a data frame with predicted values from the model
predicted_df <- data.frame(
x = x,
y_pred = predict(model)
)
# Create a scatterplot of the data points
# Add the regression line and dashed lines to show deviations
ggplot(data_df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "blue") +
geom_segment(data = predicted_df, aes(xend = x, yend = y_pred), linetype = "dashed", color = "red") +
labs(
title = "Scatterplot of Data with Increasing Residual Variance",
x = "Predictor Variable (x)",
y = "Response Variable (y)"
) +
theme_minimal()
# Create a scatterplot of the data points
# Add the regression line and dashed lines to show deviations
ggplot(data_df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "blue") +
geom_segment(data = predicted_df, aes(xend = x, yend = y_pred), linetype = "dashed", color = "gray", alpha=0.5) +
labs(
title = "Scatterplot of Data with Increasing Residual Variance",
x = "Predictor Variable (x)",
y = "Response Variable (y)"
) +
theme_minimal()
# Create a scatterplot of the data points
# Add the regression line and dashed lines to show deviations
ggplot(data_df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "blue") +
geom_segment(data = predicted_df, aes(xend = x, yend = y_pred), linetype = "dashed", color = "gray", alpha=0.7) +
labs(
title = "Scatterplot of Data with Increasing Residual Variance",
x = "Predictor Variable (x)",
y = "Response Variable (y)"
) +
theme_minimal()
1+1
x <- rnorm(1000)
hist(x)
4-4*5
x=20*5
x*20
x^2 # ^ to the power of
sqrt(x)
x/5
(2+4)/5
sqrt((30+10^2-5)/22)
c(2,5,7,1,40)
V=c(2,5,7,1,40) ##save the vector
V^2
2^v
2^V ##it's important if it's small or big letter!
V*10
sum(V*10)
X=seq(from=1, to=10, by=1)
X=seq(from=1, to=10, by=2)
sum(X^2)
sd(X)
V=seq(from=1, to=100, by=1)
(1/9)^V
sum((1/9)^V)
V=seq(from=1, to=10, by=1)
sum((1/9)^V)
V=seq(from=1, to=5, by=1)
sum((1/9)^V)
V=seq(from=1, to=2, by=1)
sum((1/9)^V)
V=seq(from=1, to=5, by=1)
sum((1/V))
V=seq(from=1, to=20, by=1)
sum((1/V))
V=seq(from=1, to=100, by=1)
sum((1/V))
V=seq(from=1, to=1000, by=1)
sum((1/V))
V=seq(from=1, to=10000, by=1)
sum((1/V))
V=seq(from=1, to=100000, by=1)
sum((1/V))
V=seq(from=1, to=1000000, by=1)
sum((1/V))
V=seq(from=1, to=1000000, by=1)
sum((1/V^2))
V=seq(from=1, to=10000000, by=1)
sum((1/V^2))
string_vector=c("Econometrics","Mexico","New York","Carlos")
string_vector
string_vector
### Matrices
my_matrix=matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)
my_matrix
my_matrix*2
4^4
X[4]
string_vector[3]
sitring_vector=="Mexico"
string_vector=="Mexico"
string_vector="Mexico"
string_vector=c("Econometrics","Mexico","New York","Carlos") #character vector
V>3
X>3
X[X>3]
X>3
2:4
elements_2_4=string_vector[2:4]
elements_2_4
elements_2_4=string_vector[2:4]
elements_2_4
print(elements_2_4)
my_matrix
my_matrix[1,2] #first row, and 2nd column
my_matrix[2,] #show me entire second row
my_matrix[,3] #show me entire third column
M2=matrix(seq(from=1, to=1600,by=1), nrow=40, ncol=40)
M2^2
M2^2+200
(M2^2+200)/(-5)
M3=(M2^2+200)/(-5)
M3[25,3]
?rnorm
my_new_vector=rnorm(1000, mean=10, sd=5)
my_new_vector
hist(my_new_vector) #plot histogram of thesee values
my_new_vector=rnorm(n=1000, mean=10, sd=5)
#how many bins I want in my histogram
hist(my_new_vector, breaks=20))
#how many bins I want in my histogram
hist(my_new_vector, breaks=20)
#how many bins I want in my histogram
hist(my_new_vector, breaks=10)
#how many bins I want in my histogram
hist(my_new_vector, breaks=100)
my_new_vector=rnorm(n=10000, mean=10, sd=5)
#how many bins I want in my histogram
hist(my_new_vector, breaks=100)
mean(my_new_vector)
my_new_vector=rnorm(n=10000, mean=10, sd=5)
#how many bins I want in my histogram
hist(my_new_vector, breaks=100)
mean(my_new_vector)
sd(my_new_vector)
my_new_vector=rnorm(n=10000, mean=10, sd=5)
sd(my_new_vector)
load("C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns/Intro_to_r/listings.Rda")
View(listings)
### Data
install.packages("tidyverse")
listings$neighbourhood_cleansed ## select this column
table(listings$neighbourhood_cleansed)
x=table(listings$neighbourhood_cleansed)
x
listings%>%
filter(neighbourhood_cleansed=="Condesa")
library(tidyverse) ##a library with functions for data analysis and visualization
listings%>%
filter(neighbourhood_cleansed=="Condesa")
listings%>%
filter(neighbourhood_cleansed=="Azcapotzalco")
P=listings%>%
filter(neighbourhood_cleansed=="Azcapotzalco")
listings%>%
filter(neighbourhood_cleansed=="Azcapotzalco")%>%
mutate(N=n())
listings%>%
filter(neighbourhood_cleansed=="Azcapotzalco")%>%
summarize(n())
library(tidyverse)
#####
listings$review_scores_rating
#####
listings$review_scores_rating=as.numeric(listings$review_scores_rating)
listings$review_scores_rating
mean(listings$review_scores_rating, na.rm=TRUE)
hist(listings$review_scores_rating, breaks=20))
hist(listings$review_scores_rating, breaks=20)
View(listings)
t.test(listings$review_scores_rating, conf.level=0.95)
clean()
load("C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns/Intro_to_r/listings.Rda")
View(listings)
listings$review_scores_rating
listings$review_scores_rating <- as.numeric(listings$review_scores_rating) # convert to numeric
listings$review_scores_rating
### Generate and Plot a standard normal distribution
set.seed(1234)
x <- rnorm(1000, mean = 0, sd = 1)
hist(x, breaks = 30, col = "lightblue", main = "Standard Normal Distribution", xlab = "Value", ylab = "Frequency")
?mean
mean(listings$review_scores_rating, na.rm = TRUE) # mean of the review scores
sum(listings$review_scores_rating, na.rm = TRUE)
listings$review_scores_rating<2
listings$review_scores_rating
### in a dataset I have both rows and columns, before comma it is rows, after comma it is columns
listings[4,5] #it gives row number 4 and column 5
low_review=listings[listings$review_scores_rating<2,] ##inside the bracket I have a logical vector
View(listings)
listings[4,5]
listings[4,]
listings[,5] # it gives me all rows for column 5
View(low_review)
is.na(listings$review_scores_rating)
#### I want to find all observations with NAs, and get rid of them
listings=listings[!is.na(listings$review_scores_rating),] # it gives me all rows where review_scores_rating is NA
is.na(listings$review_scores_rating)
listings$neighbourhood_cleansed
table(listings$neighbourhood_cleansed)
###subset data, so only data from this neighborhood shows up
listings$neighbourhood_cleansed=="Miguel Hidalgo" ## if I just write on equal sign, it's gonna redefine variable
table(listings$neighbourhood_cleansed)
Miguel_hidalgo_listings=listings[listings$neighbourhood_cleansed=="Miguel Hidalgo",]
###find mean review score in your neighborhood
mean(Miguel_hidalgo_listings$review_scores_rating, na.rm = TRUE)
Miguel_hidalgo_listings=listings[listings$neighbourhood_cleansed=="Iztapalapa",]
View(Miguel_hidalgo_listings)
xbar=mean(Miguel_hidalgo_listings$review_scores_rating, na.rm = TRUE)
Miguel_hidalgo_listings=listings[listings$neighbourhood_cleansed=="Miguel Hidalgo",]
standard_devation=sd(Miguel_hidalgo_listings$review_scores_rating, na.rm = TRUE)
xbar=mean(Miguel_hidalgo_listings$review_scores_rating, na.rm = TRUE)
xbar
standard_devation
xbar
standard_devation
qnorm(0.025)
qnorm(0.975)
###95 % confidence interval
## I am looking for 97.5 quantile of a normal
critical_value = qnorm(0.975)
n=nrow(Miguel_hidalgo_listings)
Lower_band=xbar-critical_value*standard_devation/sqrt(n)
Lower_band
Upper_band=xbar+critical_value*standard_devation/sqrt(n)
Upper_band
t.test(Miguel_hidalgo_listings$review_scores_rating, conf.level = 0.95)
t.test(Miguel_hidalgo_listings$review_scores_rating, conf.level = 0.99)
t.test(Miguel_hidalgo_listings$review_scores_rating, conf.level = 0.90)
#### plot histogram
hist(Miguel_hidalgo_listings$review_scores_rating, breaks=5)
#### plot histogram
hist(Miguel_hidalgo_listings$review_scores_rating, breaks=10)
#### plot histogram
hist(Miguel_hidalgo_listings$review_scores_rating, breaks=100)
mean(Miguel_hidalgo_listings$review_scores_rating, na.rm = TRUE)
median(Miguel_hidalgo_listings$review_scores_rating, na.rm = TRUE)
######
V=c(4,5,2,7,8)
mean(V)
sum(V)
V^2
2^V
X=seq(from=1, to=100, by=1)
X
X=seq(from=1, to=100, by=4)
X
X
5/4
1/V
X=seq(from=1, to=100, by=1)
1/X
sum(1/X)
X=seq(from=1, to=10000, by=1)
1/X
sum(1/X)
X=seq(from=1, to=100000, by=1)
1/X
sum(1/X)
X=seq(from=1, to=100, by=1)
1/X
sum(1/X^2)
X=seq(from=1, to=5, by=1)
sum(1/X^2)
1/X^2
X=seq(from=1, to=10, by=1)
1/X
sum(1/X^2)
X=seq(from=1, to=100, by=1)
sum(1/X^2)
X=seq(from=1, to=1000, by=1)
sum(1/X^2)
X=seq(from=1, to=10000, by=1)
sum(1/X^2)
#create a vector with elements from 2 to 6.
#square it, add 200, and divide by -5
#what's 3rd element
v=c(2,3,4,5,6)
v=c(2:6)
v=c(2:6)
v=v^2
v=v+200
v=v/-5
v[3]
#generate  1000 values from normal distribution with mean 3 and sd 2
x=rnorm(1000,mean=3,sd=2)
#generate  1000 values from normal distribution with mean 3 and sd 2
x=rnorm(1000,mean=3,sd=2)
#generate  1000 values from normal distribution with mean 3 and sd 2
x=rnorm(1000,mean=3,sd=2)
#generate  1000 values from normal distribution with mean 3 and sd 2
x=rnorm(1000,mean=3,sd=2)
#generate  1000 values from normal distribution with mean 3 and sd 2
x=rnorm(1000,mean=3,sd=2)
hist(x)
x=rnorm(1000,mean=3,sd=2)
hist(x)
x=rnorm(1000,mean=3,sd=2)
hist(x)
x=rnorm(1000,mean=3,sd=2)
hist(x)
x=rnorm(1000,mean=3,sd=2)
hist(x)
x=rnorm(1000,mean=3,sd=2)
hist(x)
x=rnorm(1000,mean=3,sd=2)
hist(x)
x=rnorm(1000,mean=3,sd=2)
hist(x)
x=rnorm(1000,mean=3,sd=2)
hist(x)
##generate another 1000 values from normal with mean 20 and sd 6
y=rnorm(1000,mean=20,sd=6)
hist(y)
z=x+y
mean(z)
sd(z)
sqrt(40)
sd(z)
sd(z)
hist(z)
airbnb <- read.csv("C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns/Intro_to_r/airbnb.csv", comment.char="#")
View(airbnb)
View(airbnb)
###
nrow(airbnb)
airbnb$host_id
length(airbnb$host_id) ##lengtho of this column
unique(airbnb$host_id)
length(unique(airbnb$host_id)) ##number of unique values in this column
###how many listings in each neighborhood
table(airbnb$neighbourhood_cleansed)
table(airbnb$neighbourhood)
###how many listings in each neighborhood
table(airbnb$neighbourhood_cleansed)
###how many listings in each neighborhood
table(airbnb$neighbourhood_cleansed)
#use functioin sort()
sort(table(airbnb$neighbourhood_cleansed),decreasing = TRUE)
sort(table(airbnb$host_name),decreasing = TRUE)
##sort host names
sort(table(airbnb$host_name),decreasing = TRUE)
##sort host names
sort(table(airbnb$host_name),decreasing = TRUE)[100]
##sort host names
sort(table(airbnb$host_name),decreasing = TRUE)[1:100]
##how many bedrooms on average?
mean(airbnb$bedrooms)
##how many bedrooms on average?
mean(airbnb$bedrooms, na.rm=TRUE) ##set option to remove na to be true
max(airbnb$bedrooms, na.rm=TRUE)
max(airbnb$bedrooms, na.rm=TRUE)
View(airbnb)
mean(airbnbr$raview_scores_rating, na.rm=TRUE)
mean(airbnb$raview_scores_rating, na.rm=TRUE)
mean(airbnb$review_scores_rating, na.rm=TRUE)
sd(airbnb$review_scores_rating, na.rm=TRUE)
hist(airbnb$review_scores_rating)
mean(airbnb$price, na.rm=TRUE)
median(airbnb$price, na.rm=TRUE)
hist(airbnb$price)
plot(airbnb$review_scores_rating, airbnb$price)
cor(airbnb$review_scores_rating, airbnb$price, use="complete.obs")
#### plot average price by the number of bedrooms
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
#### plot average price by the number of bedrooms
install.packages("tidyverse")
install.packages("tidyverse")
airbnb%>%
group_by(bedrooms)%>%
summarize(mean_price=mean(price, na.rm=TRUE))
airbnb%>%
group_by(bedrooms)%>%
summarize(mean_price=mean(price, na.rm=TRUE))%>%
ggplot(aes(x=bedrooms, y=mean_price))+
geom_bar("identity")
airbnb%>%
group_by(bedrooms)%>%
summarize(mean_price=mean(price, na.rm=TRUE))%>%
ggplot(aes(x=bedrooms, y=mean_price))+
geom_bar("identity")
airbnb%>%
group_by(bedrooms)%>%
summarize(mean_price=mean(price, na.rm=TRUE))%>%
ggplot(aes(x=bedrooms, y=mean_price))+
geom_bar(stat="identity")
airbnb%>%
group_by(bedrooms)%>%
summarize(mean_price=mean(price, na.rm=TRUE))%>%
ggplot(aes(x=bedrooms, y=mean_price))+
geom_point()
airbnb%>%
group_by(bedrooms)%>%
summarize(mean_price=mean(price, na.rm=TRUE))%>%
ggplot(aes(x=bedrooms, y=mean_price))+
geom_point()
airbnb%>%
group_by(bedrooms)%>%
summarize(mean_price=mean(price, na.rm=TRUE))%>%
ggplot(aes(x=bedrooms, y=mean_price))+
geom_bar(stat="identity")
airbnb%>%
group_by(bedrooms)%>%
summarize(mean_price=mean(price, na.rm=TRUE))%>%
airbnb%>%
group_by(bedrooms)%>%
summarize(mean_price=mean(price, na.rm=TRUE))
###
airbnb%>%
group_by(neighborhood_cleansed)%>%
summarize(mean_price=mean(price, na.rm=TRUE))
airbnb%>%
group_by(bedrooms)%>%
summarize(mean_price=mean(price, na.rm=TRUE))
###
D=airbnb%>%
group_by(neighbourhood_cleansed)%>%
summarize(mean_price=mean(price, na.rm=TRUE))
View(D)
###
D=airbnb%>%
group_by(neighbourhood_cleansed)%>%
summarize(mean_price=mean(price, na.rm=TRUE), sd_price=sd(price, na.rm=TRUE))
n=nrow(airbnb)
##95% confidence interval
ggplot(D, aes(x=neighbourhood_cleansed, y=mean_price))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=mean_price-sd_price/sqrt(17640)*1.96, ymax=mean_price+sd_price/sqrt(17640)*1.96), width=0.2)
airbnb <- read.csv("C:/Users/kzysi/Dropbox/Itam_teaching/Markdowns/Intro_to_r/airbnb.csv", comment.char="#")
View(airbnb)
View(airbnb)
##calculate confidence interval for the mean price
t.test(sample$price, conf.level = 0.95) ##this one uses student t!
?t.test
